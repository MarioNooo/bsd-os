# BSDI BSDI_CONTRIB,v 2.2 1998/02/05 22:54:14 don Exp
Software Package:       
	portmap

Release/Version:
	5beta

Retrieved from:
	<URL:ftp://ftp.win.tue.nl/pub/security/portmap_*.tar.gz>

Bug reports:
	Wietse Venema (wietse@wzv.win.tue.nl) was the lead developer of
	the version we got from the ftp site above.  Whether there is
	continuing effort by him or another group is unknown.

Comments:

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Modifications to this version made by BSDI:

Merged in our (BSDi and UCB) changes from our previous version, but left
CALLIT in (since it now has some security checking).
Cleaned up a bunch of compiler warning generated by -Wall (no biggies).
Created a BSDI style makefile.  The original from Venema is in Makefile
Left out daemon.c and strerror.c since we already have that in libc.

Below is a context diff comparing the 5beta version of portmap as retrieved
verses our BSDI ported one.

Only in ../portmap_5beta/: BLURB
Only in .: BSDI_CONTRIB
Only in ../portmap_5beta/: CHANGES
Only in .: CVS
diff -rc ../portmap_5beta/Makefile ./Makefile
*** ../portmap_5beta/Makefile	Sat Jul  6 15:06:19 1996
--- ./Makefile	Thu Feb  5 15:09:37 1998
***************
*** 8,22 ****
  # if you disagree. See `man 3 syslog' for examples. Some syslog versions
  # do not provide this flexibility.
  #
! FACILITY=LOG_MAIL
  
  # To disable tcp-wrapper style access control, comment out the following
  # macro definitions.  Access control can also be turned off by providing
  # no access control tables. The local system, since it runs the portmap
  # daemon, is always treated as an authorized host.
  
! HOSTS_ACCESS= -DHOSTS_ACCESS
! WRAP_LIB = $(WRAP_DIR)/libwrap.a
  
  # Comment out if your RPC library does not allocate privileged ports for
  # requests from processes with root privilege, or the new portmap will
--- 8,23 ----
  # if you disagree. See `man 3 syslog' for examples. Some syslog versions
  # do not provide this flexibility.
  #
! #FACILITY=LOG_MAIL
! FACILITY=LOG_DAEMON
  
  # To disable tcp-wrapper style access control, comment out the following
  # macro definitions.  Access control can also be turned off by providing
  # no access control tables. The local system, since it runs the portmap
  # daemon, is always treated as an authorized host.
  
! #HOSTS_ACCESS= -DHOSTS_ACCESS
! #WRAP_LIB = $(WRAP_DIR)/libwrap.a
  
  # Comment out if your RPC library does not allocate privileged ports for
  # requests from processes with root privilege, or the new portmap will
***************
*** 66,72 ****
  # address structures (struct sockaddr has a sa_len component; examples:
  # AIX 4.1 and 4.4BSD). Uncomment next macro definition in that case.
  #
! # SA_LEN = -DHAS_SA_LEN		# AIX 4.x, BSD 4.4, FreeBSD, NetBSD
  
  # With verbose logging on, HP-UX 9.x and AIX 4.1 leave zombies behind when
  # SIGCHLD is not ignored. Enable next macro for a fix.
--- 67,73 ----
  # address structures (struct sockaddr has a sa_len component; examples:
  # AIX 4.1 and 4.4BSD). Uncomment next macro definition in that case.
  #
! SA_LEN = -DHAS_SA_LEN		# AIX 4.x, BSD 4.4, FreeBSD, NetBSD
  
  # With verbose logging on, HP-UX 9.x and AIX 4.1 leave zombies behind when
  # SIGCHLD is not ignored. Enable next macro for a fix.
***************
*** 81,91 ****
  # libwrap.a object library. WRAP_DIR should specify the directory with
  # that library.
  
! WRAP_DIR= ../tcp_wrappers
  
  # Auxiliary object files that may be missing from your C library.
  #
! AUX	= daemon.o strerror.o
  
  # NEXTSTEP is a little different. The following seems to work with NS 3.2
  #
--- 82,92 ----
  # libwrap.a object library. WRAP_DIR should specify the directory with
  # that library.
  
! #WRAP_DIR= ../tcp_wrappers
  
  # Auxiliary object files that may be missing from your C library.
  #
! #AUX	= daemon.o strerror.o
  
  # NEXTSTEP is a little different. The following seems to work with NS 3.2
  #
***************
*** 99,105 ****
  
  # Comment out if your compiler talks ANSI and understands const
  #
! CONST   = -Dconst=
  
  ### End of configurable stuff.
  ##############################
--- 100,106 ----
  
  # Comment out if your compiler talks ANSI and understands const
  #
! #CONST   = -Dconst=
  
  ### End of configurable stuff.
  ##############################
***************
*** 117,122 ****
--- 118,126 ----
  portmap: $(OBJECTS) $(WRAP_DIR)/libwrap.a
  	$(CC) $(CFLAGS) -o $@ $(OBJECTS) $(WRAP_LIB) $(LIBS)
  
+ uintslen.h: gen_uintslen
+ 	./gen_uintslen > uintslen.h
+ 
  pmap_dump: pmap_dump.c
  	$(CC) $(CFLAGS) -o $@ $? $(LIBS)
  
***************
*** 150,154 ****
  pmap_dump.o: pmap_dump.c
  pmap_set.o: pmap_set.c
  portmap.o: portmap.c
! portmap.o: pmap_check.h Makefile
  strerror.o: strerror.c
--- 154,158 ----
  pmap_dump.o: pmap_dump.c
  pmap_set.o: pmap_set.c
  portmap.o: portmap.c
! portmap.o: uintslen.h pmap_check.h Makefile
  strerror.o: strerror.c
Only in ../portmap_5beta/: Makefile.shlib
diff -rc ../portmap_5beta/README ./README
*** ../portmap_5beta/README	Sat Jul  6 15:06:20 1996
--- ./README	Thu Feb  5 15:43:41 1998
***************
*** 1,3 ****
--- 1,4 ----
+ BSD BSDI_CONTRIB,v 2.2 1998/02/05 22:54:14 don Exp
  @(#) README 1.7 96/07/06 23:06:19
  
  This is the README file for the 5th enhanced portmapper release.
Only in ../portmap_5beta/: daemon.c
diff -rc ../portmap_5beta/from_local.c ./from_local.c
*** ../portmap_5beta/from_local.c	Fri May 31 07:52:58 1996
--- ./from_local.c	Thu Feb  5 15:49:41 1998
***************
*** 1,3 ****
--- 1,4 ----
+ /*      BSDI BSDI_CONTRIB,v 2.2 1998/02/05 22:54:14 don Exp        */
   /*
    * Check if an address belongs to the local system. Adapted from:
    * 
***************
*** 52,57 ****
--- 53,61 ----
  #include <sys/ioctl.h>
  #include <syslog.h>
  
+ #include <unistd.h>
+ #include <stdlib.h>
+ 
  #ifndef TRUE
  #define	TRUE	1
  #define FALSE	0
***************
*** 96,101 ****
--- 100,106 ----
  
  /* find_local - find all IP addresses for this host */
  
+ int
  find_local()
  {
      struct ifconf ifc;
***************
*** 154,159 ****
--- 159,165 ----
  
  /* from_local - determine whether request comes from the local system */
  
+ int
  from_local(addr)
  struct sockaddr_in *addr;
  {
Only in .: from_local.o
Only in .: gen_uintslen
Only in .: gen_uintslen.c
Only in ../portmap_5beta/: get_myaddress.c
Only in .: makefile
diff -rc ../portmap_5beta/pmap_check.c ./pmap_check.c
*** ../portmap_5beta/pmap_check.c	Sun Jul  7 02:49:10 1996
--- ./pmap_check.c	Thu Feb  5 15:49:42 1998
***************
*** 1,3 ****
--- 1,4 ----
+ /*      BSDI BSDI_CONTRIB,v 2.2 1998/02/05 22:54:14 don Exp        */
   /*
    * pmap_check - additional portmap security.
    * 
***************
*** 36,41 ****
--- 37,43 ----
  static char sccsid[] = "@(#) pmap_check.c 1.8 96/07/07 10:49:10";
  #endif
  
+ #include <sys/types.h>
  #include <rpc/rpc.h>
  #include <rpc/pmap_prot.h>
  #include <syslog.h>
***************
*** 46,51 ****
--- 48,57 ----
  #include <rpc/rpcent.h>
  #endif
  
+ #include <stdlib.h>
+ #include <unistd.h>
+ #include <stdio.h>
+ 
  extern char *inet_ntoa();
  
  #include "pmap_check.h"
***************
*** 110,115 ****
--- 116,122 ----
  
  /* check_default - additional checks for NULL, DUMP, GETPORT and unknown */
  
+ int
  check_default(addr, proc, prog)
  struct sockaddr_in *addr;
  u_long  proc;
***************
*** 128,133 ****
--- 135,141 ----
  
  /* check_privileged_port - additional checks for privileged-port updates */
  
+ int
  check_privileged_port(addr, proc, prog, port)
  struct sockaddr_in *addr;
  u_long  proc;
***************
*** 147,152 ****
--- 155,161 ----
  
  #ifdef LOOPBACK_SETUNSET
  
+ int
  check_setunset(xprt, ludp_xprt, ltcp_xprt, proc, prog, port)
  SVCXPRT *xprt;
  SVCXPRT *ludp_xprt;
***************
*** 173,178 ****
--- 182,188 ----
  
  #else
  
+ int
  check_setunset(addr, proc, prog, port)
  struct sockaddr_in *addr;
  u_long  proc;
***************
*** 197,202 ****
--- 207,213 ----
  
  /* check_callit - additional checks for forwarded requests */
  
+ int
  check_callit(addr, proc, prog, aproc)
  struct sockaddr_in *addr;
  u_long  proc;
***************
*** 249,261 ****
      };
      struct proc_map *procp;
      static struct proc_map procmap[] = {
! 	PMAPPROC_CALLIT, "callit",
! 	PMAPPROC_DUMP, "dump",
! 	PMAPPROC_GETPORT, "getport",
! 	PMAPPROC_NULL, "null",
! 	PMAPPROC_SET, "set",
! 	PMAPPROC_UNSET, "unset",
! 	0, 0,
      };
  
      /*
--- 260,272 ----
      };
      struct proc_map *procp;
      static struct proc_map procmap[] = {
! 	{ PMAPPROC_CALLIT, "callit"},
! 	{ PMAPPROC_DUMP, "dump"},
! 	{ PMAPPROC_GETPORT, "getport"},
! 	{ PMAPPROC_NULL, "null"},
! 	{ PMAPPROC_SET, "set"},
! 	{ PMAPPROC_UNSET, "unset"},
! 	{ 0, NULL},
      };
  
      /*
***************
*** 269,275 ****
  
  	if (prognum == 0) {
  	    progname = "";
! 	} else if (rpc = getrpcbynumber((int) prognum)) {
  	    progname = rpc->r_name;
  	} else {
  	    sprintf(progname = progbuf, "%lu", prognum);
--- 280,286 ----
  
  	if (prognum == 0) {
  	    progname = "";
! 	} else if ((rpc = getrpcbynumber((int) prognum)) != NULL) {
  	    progname = rpc->r_name;
  	} else {
  	    sprintf(progname = progbuf, "%lu", prognum);
diff -rc ../portmap_5beta/pmap_check.h ./pmap_check.h
*** ../portmap_5beta/pmap_check.h	Sat Jul  6 15:06:23 1996
--- ./pmap_check.h	Thu Feb  5 15:43:42 1998
***************
*** 1,3 ****
--- 1,4 ----
+ /*	BSDI BSDI_CONTRIB,v 2.2 1998/02/05 22:54:14 don Exp */
  /* @(#) pmap_check.h 1.4 96/07/06 23:06:22 */
  
  extern int from_local();
Only in .: pmap_check.o
diff -rc ../portmap_5beta/pmap_dump.c ./pmap_dump.c
*** ../portmap_5beta/pmap_dump.c	Thu Jun 11 14:53:16 1992
--- ./pmap_dump.c	Thu Feb  5 15:43:42 1998
***************
*** 1,3 ****
--- 1,4 ----
+ /*	BSDI BSDI_CONTRIB,v 2.2 1998/02/05 22:54:14 don Exp */
   /*
    * pmap_dump - dump portmapper table in format readable by pmap_set
    * 
diff -rc ../portmap_5beta/pmap_set.c ./pmap_set.c
*** ../portmap_5beta/pmap_set.c	Sat Jul  6 15:06:23 1996
--- ./pmap_set.c	Thu Feb  5 15:43:42 1998
***************
*** 1,3 ****
--- 1,4 ----
+ /*	BSDI BSDI_CONTRIB,v 2.2 1998/02/05 22:54:14 don Exp */
   /*
    * pmap_set - set portmapper table from data produced by pmap_dump
    * 
Only in .: portmap
Only in .: portmap.0
Only in .: portmap.8
diff -rc ../portmap_5beta/portmap.c ./portmap.c
*** ../portmap_5beta/portmap.c	Sat Jul  6 15:06:24 1996
--- ./portmap.c	Thu Feb  5 15:35:57 1998
***************
*** 1,6 ****
  /*-
!  * Copyright (c) 1990 The Regents of the University of California.
!  * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions
--- 1,7 ----
+ /*	BSDI BSDI_CONTRIB,v 2.2 1998/02/05 22:54:14 don Exp	*/
  /*-
!  * Copyright (c) 1990, 1993
!  *	The Regents of the University of California.  All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions
***************
*** 32,44 ****
   */
  
  #ifndef lint
! char copyright[] =
! "@(#) Copyright (c) 1990 The Regents of the University of California.\n\
!  All rights reserved.\n";
  #endif /* not lint */
  
  #ifndef lint
! static char sccsid[] = "@(#) portmap.c 1.6 96/07/06 23:06:23";
  #endif /* not lint */
  
  /*
--- 33,45 ----
   */
  
  #ifndef lint
! static char copyright[] =
! "@(#) Copyright (c) 1990, 1993\n\
! 	The Regents of the University of California.  All rights reserved.\n";
  #endif /* not lint */
  
  #ifndef lint
! static char sccsid[] = "@(#)portmap.c	8.1 (Berkeley) 6/6/93";
  #endif /* not lint */
  
  /*
***************
*** 80,90 ****
--- 81,96 ----
   * Mountain View, California  94043
   */
  
+ #include <sys/types.h>
  #include <rpc/rpc.h>
  #include <rpc/pmap_prot.h>
  #include <stdio.h>
+ #include <stdlib.h>
+ #include <unistd.h>
+ #include <string.h>
  #include <syslog.h>
  #include <netdb.h>
+ #include <limits.h>
  #include <sys/socket.h>
  #include <sys/ioctl.h>
  #include <sys/wait.h>
***************
*** 95,102 ****
  #include <netinet/in.h>
  #endif
  
! extern char *strerror();
! #include <stdlib.h>
  
  #ifndef LOG_PERROR
  #define LOG_PERROR 0
--- 101,110 ----
  #include <netinet/in.h>
  #endif
  
! #include "uintslen.h"
! 
! /* not in any bsdi rpc includes */
! void get_myaddress __P((struct sockaddr_in *addr));
  
  #ifndef LOG_PERROR
  #define LOG_PERROR 0
***************
*** 148,153 ****
--- 156,162 ----
  #endif
  #endif
  
+ int
  main(argc, argv)
  	int argc;
  	char **argv;
***************
*** 157,162 ****
--- 166,172 ----
  	struct sockaddr_in addr;
  	int len = sizeof(struct sockaddr_in);
  	register struct pmaplist *pml;
+ 	char logident[sizeof("portmap[]")+UINT_MAX_DEC_SLEN];
  
  	while ((c = getopt(argc, argv, "dv")) != EOF) {
  		switch (c) {
***************
*** 182,192 ****
  		exit(1);
  	}
  
  #ifdef LOG_MAIL
! 	openlog("portmap", debugging ? LOG_PID | LOG_PERROR : LOG_PID,
! 	    FACILITY);
  #else
! 	openlog("portmap", debugging ? LOG_PID | LOG_PERROR : LOG_PID);
  #endif
  
  	if ((sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0) {
--- 192,203 ----
  		exit(1);
  	}
  
+ 	/* we fork before calling syslog(), so create our own pid tag */
+ 	sprintf(logident, "portmap[%u]", getpid());
  #ifdef LOG_MAIL
! 	openlog(logident, debugging ? LOG_PERROR : 0, FACILITY);
  #else
! 	openlog(logident, debugging ? LOG_PERROR : 0);
  #endif
  
  	if ((sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0) {
***************
*** 401,407 ****
  				ans = 1;
  			}
  		done:
! 			if ((!svc_sendreply(xprt, xdr_int, (caddr_t)&ans)) &&
  			    debugging) {
  				(void) fprintf(stderr, "svc_sendreply\n");
  				abort();
--- 412,418 ----
  				ans = 1;
  			}
  		done:
! 			if ((!svc_sendreply(xprt, xdr_long, (caddr_t)&ans)) &&
  			    debugging) {
  				(void) fprintf(stderr, "svc_sendreply\n");
  				abort();
***************
*** 447,453 ****
  					prevpml->pml_next = pml;
  				free(t);
  			}
! 			if ((!svc_sendreply(xprt, xdr_int, (caddr_t)&ans)) &&
  			    debugging) {
  				(void) fprintf(stderr, "svc_sendreply\n");
  				abort();
--- 458,464 ----
  					prevpml->pml_next = pml;
  				free(t);
  			}
! 			if ((!svc_sendreply(xprt, xdr_long, (caddr_t)&ans)) &&
  			    debugging) {
  				(void) fprintf(stderr, "svc_sendreply\n");
  				abort();
***************
*** 474,480 ****
  				port = fnd->pml_map.pm_port;
  			else
  				port = 0;
! 			if ((!svc_sendreply(xprt, xdr_int, (caddr_t)&port)) &&
  			    debugging) {
  				(void) fprintf(stderr, "svc_sendreply\n");
  				abort();
--- 485,491 ----
  				port = fnd->pml_map.pm_port;
  			else
  				port = 0;
! 			if ((!svc_sendreply(xprt, xdr_long, (caddr_t)&port)) &&
  			    debugging) {
  				(void) fprintf(stderr, "svc_sendreply\n");
  				abort();
Only in .: portmap.o
Only in ../portmap_5beta/: strerror.c
Only in .: uintslen.h
