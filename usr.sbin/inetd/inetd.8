.\"	$NetBSD: inetd.8,v 1.33 2001/01/25 21:49:31 jlam Exp $
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)inetd.8	8.4 (Berkeley) 6/1/94
.\"
.Dd June 1, 1994
.Dt INETD 8
.Os BSD 4.4
.Sh NAME
.Nm inetd
.Nd internet
.Dq super-server
.Sh SYNOPSIS
.Nm inetd
.Op Fl d
.Op Fl R Ar rate
.Op Fl u Ar port-list
.Op Ar configuration file
.Sh DESCRIPTION
The
.Nm inetd
program
should be run at boot time by
.Pa /etc/rc
(see
.Xr rc 8 ) .
It then listens for connections on certain
internet sockets.  When a connection is found on one
of its sockets, it decides what service the socket
corresponds to, and invokes a program to service the request.
The server program is invoked with the service socket
as its standard input, output and error descriptors.
After the program is
finished,
.Nm inetd
continues to listen on the socket (except in some cases which
will be described below).  Essentially,
.Nm inetd
allows running one daemon to invoke several others,
reducing load on the system.
.Pp
The options available for
.Nm inetd:
.Bl -tag -width Ds
.It Fl d
Turns on debugging.
.It Fl R Ar rate
Specifies the maximum number of times a service can be invoked
in one minute; the default is 1000.
.It Fl u Ar port-list
For the internal UDP based services, the
.Fl u
option specifies a list of comma separated UDP service
names or port numbers.
If one of the internal UDP services receives a packet
from one of these ports, that packet will be silently
ignored (after a
.Xr syslog 3
entry has been made).
The service name
.Dq internal
is shorthand for a list of all the internally
implemented UDP services, plus the
.Dq systat
and
.Dq quotd
services.
This is the default action if the
.Fl u
option is not specified.
A value of
.Dq -
can be used to allow the internal UDP services to respond
to all source ports.
.El
.Pp
Upon execution,
.Nm inetd
reads its configuration information from a configuration
file which, by default, is
.Pa /etc/inetd.conf .
This file contains a list of service descriptions.  Each service
description must have an entry for each for each field separated by a
tab or a space.  Service descriptions may be continued on multiple
lines, the second and subsequent lines must start with a tab or a
space.  Comments are denoted by a ``#'' at the beginning of a line.
.Pp
By default, all service descriptions are assumed to be IP version 4
(unless the protocol field explicitly states otherwise).
A line may contain just one entry, specified as
.Dq ipv4 ,
.Dq ipv6
or
.Dq ipv6only ,
to change the default IP version for successive service descriptions
that do not have an explicit
.Em protocol/modifier
specification.
.
Specifying
.Dq ipv4
means only IP version 4,
.Dq ipv6
means both IP version 4 and IP version 6, and
.Dq ipv6only
means just IP version 6.
Note that most applications will require some modification
to work with IP version 6 addresses.
.Pp
The fields of a service description are as follows:
.Pp
.Bd -unfilled -offset indent -compact
service name
socket type
protocol
wait/nowait
user[/sec]
server program
server program arguments
.Ed
.Pp
There are two types of services that 
.Nm inetd
can start: standard and TCPMUX.
A standard service has a well-known port assigned to it;
it may be a service that implements an official Internet standard or is a
BSD-specific service.
As described in 
.Tn RFC 1078 ,
TCPMUX services are nonstandard services that do not have a 
well-known port assigned to them.
They are invoked from
.Nm inetd 
when a program connects to the
.Dq tcpmux
well-known port and specifies
the service name.  
This feature is useful for adding locally-developed servers.
.Pp
The
.Em service-name
entry is the name of a valid service in
the file
.Pa /etc/services
(numerical port numbers may also be used).
For
.Dq internal
services (discussed below), the service
name
.Em must
be the official name of the service (that is, the first entry in
.Pa /etc/services ) .
For TCPMUX services, the value of the
.Em service-name
field consists of the string
.Dq tcpmux
followed by a slash and the
locally-chosen service name. 
The service names listed in 
.Pa /etc/services
and the name 
.Dq help
are reserved.
Try to choose unique names for your TCPMUX services by prefixing them with
your organization's name and suffixing them with a version number.
.Pp
The
.Em socket-type
should be one of
.Dq stream ,
.Dq dgram ,
.Dq raw ,
.Dq rdm ,
or
.Dq seqpacket ,
depending on whether the socket is a stream, datagram, raw,
reliably delivered message, or sequenced packet socket.
TCPMUX services must use 
.Dq stream .
.Pp
The
.Em protocol
must be a valid protocol as given in
.Pa /etc/protocols .
Examples might be
.Dq tcp
or
.Dq udp .
TCPMUX services must use 
.Dq tcp .
The
.Em protocol
may have a modifier attached to it, by using the format
.Em protocol/modifier .
A
.Em modifier
of
.Dq 4
means that the service is only for IP version 4.
A
.Em modifier
of
.Dq 6
means that the service is only for IP version 6.
A
.Em modifier
of
.Dq 46
or
.Dq 64
means that the service is for both IP version 4 and IP version 6.
A
.Em modifier
of
.Dq faith
will mark the socket for use with
.Xr faithd 8
and
.Xr setsockopt 2
will be issued with
.Dv IPV6_FAITH .
See
.Xr faith 4
for details.
For backwards compatability, if
.Em protocol
is specified as
.Dq tcp4 ,
.Dq tcp6 ,
.Dq udp4
or
.Dq udp6 ,
it will be equivalent to
.Dq tcp/4 ,
.Dq tcp/46 ,
.Dq udp/4
and
.Dq udp/46 ,
respectively.
.Pp
The
.Em wait/nowait
entry specifies whether the server that is invoked by inetd will take over
the socket associated with the service access point, and thus whether
.Nm inetd
should wait for the server to exit before listening for new service
requests.
Datagram servers must use
.Dq wait ,
as they are always invoked with the original datagram socket bound
to the specified service address.
These servers must read at least one datagram from the socket
before exiting.
If a datagram server connects
to its peer, freeing the socket so
.Nm inetd
can received further messages on the socket, it is said to be
a
.Dq multi-threaded
server;
it should read one datagram from the socket and create a new socket
connected to the peer.
It should fork, and the parent should then exit
to allow
.Nm inetd
to check for new service requests to spawn new servers.
Datagram servers which process all incoming datagrams
on a socket and eventually time out are said to be
.Dq single-threaded .
.Xr Comsat 8 ,
.Pq Xr biff 1
and
.Xr talkd 8
are both examples of the latter type of
datagram server.
.Xr Tftpd 8
is an example of a multi-threaded datagram server.
.Pp
Servers using stream sockets generally are multi-threaded and
use the
.Dq nowait
entry.
Connection requests for these services are accepted by
.Nm inetd ,
and the server is given only the newly-accepted socket connected
to a client of the service.
Most stream-based services operate in this manner.
Stream-based servers that use
.Dq wait
are started with the listening service socket, and must accept
at least one connection request before exiting.
Such a server would normally accept and process incoming connection
requests until a timeout.
TCPMUX services must use 
.Dq nowait .
.Pp
The
.Em user[/sec]
entry should contain the user name of the user as whom the server
should run.  This allows for servers to be given less permission
than root.
The optional
.Em /sec
part can be used to specify IPSEC information.
The information is specified as a string of pairs of characters.
The first character of the pair
specifies the type of information, and the second
specifies the level.
The type may be 'A', 'E' or 'T', for authentication,
transport mode, or tunnel mode.
The level may
be 'd' (default), 'u' (use), 'r' (require), 'q' (unique)
or 'n' (never), or a numeric value between -1 and 3.
.Pp
NOTE: The format for specifying security information is in flux,
and will change in future releases.
.Pp
The
.Em server-program
entry should contain the pathname of the program which is to be
executed by
.Nm inetd
when a request is found on its socket.  If
.Nm inetd
provides this service internally, this entry should
be
.Dq internal .
.Pp
The
.Em server program arguments
should be just as arguments
normally are, starting with argv[0], which is the name of
the program.  If the service is provided internally, the
word
.Dq internal
should take the place of this entry.
.Pp
The
.Nm inetd
program
provides several
.Dq trivial
services internally by use of
routines within itself.  These services are
.Dq echo ,
.Dq discard ,
.Dq chargen
(character generator),
.Dq daytime
(human readable time), and
.Dq time
(machine readable time,
in the form of the number of seconds since midnight, January
1, 1900).  All of these services are tcp based.  For
details of these services, consult the appropriate
.Tn RFC
from the Network Information Center.
.Pp
The
.Nm inetd
program
rereads its configuration file when it receives a hangup signal,
.Dv SIGHUP .
Services may be added, deleted or modified when the configuration file
is reread.
.Ss TCPMUX
.Tn RFC 1078 
describes the TCPMUX protocol:
``A TCP client connects to a foreign host on TCP port 1.  It sends the
service name followed by a carriage-return line-feed <CRLF>.  The
service name is never case sensitive.  The server replies with a
single character indicating positive (+) or negative (\-)
acknowledgment, immediately followed by an optional message of
explanation, terminated with a <CRLF>.  If the reply was positive,
the selected protocol begins; otherwise the connection is closed.''
The program is passed the TCP connection as file descriptors 0 and 1.
.Pp
If the TCPMUX service name begins with a ``+'',
.Nm inetd
returns the positive reply for the program.
This allows you to invoke programs that use stdin/stdout
without putting any special server code in them.
.Pp
The special service name
.Dq help
causes
.Nm inetd
to list TCPMUX services in
.Pa inetd.conf .
.ne 1i
.Ss IPsec
To support IPsec policy settings for each socket,
a special form of the comment line, starting with
.Dq Li "#@" ,
is used as a policy specifier.
The content of the comment line will be treated as a IPsec policy string,
as described in
.Xr ipsec_set_policy 3 .
Multiple IPsec policy strings may be specified by using a semicolon
as a separator.
If conflicting policy strings are found in a single line,
the last string will take effect.
A
.Li "#@"
line affects all of the following lines in
.Pa inetd.conf ,
but the IPsec policy can be reset by using a comment line containing
only
.Li "#@"
.Pq with no policy string .
.Pp
If an invalid IPsec policy string appears in
.Pa inetd.conf ,
.Nm
logs an error message using
.Xr syslog 3
and terminates itself.
.Ss IPv6 support
.Nm
uses the
.Dv IPV6_V6ONLY
.Xr setsockopt 2
option to explicitly set all IPv6 sockets for either
just IPv6 traffic, or IPv6 and IPv4 traffic, overriding
the system-wide default value defined by the
.Xr sysctl 1
variable
.Dq net.inet.ip6.v6only .
Thus, a service with a protocol of
.Dq "tcp/6"
will always receive just IPv6 traffic, and a service with a protocol of
.Dq "tcp/46"
will always receive both IPv4 and IPv6 traffic.
If the service has a protocol of
.Dq tcp ,
then it will be bound to either IPv4 only traffic, IPv6 only traffic
or IPv4 and IPv6 traffic depending on whether
.Dq ipv4
.Dq ipv6only
or
.Dq ipv6
was previously specified.  (If none have been specified, the default is
.Dq ipv4 ).
A word of caution: you should not have one service for just IPv4 traffic,
and another for both IPv4 and IPv6 traffic, as it will then be
indeterminate whether the IPv4 traffic will go to the IPv4 only socket,
or the IPv6 socket (it is dependent on the order of the
.X4 bind 3
calls.)
See
.Xr inet6 4
for more information on, and the issues relating to, receiving
both IPv4 and IPv6 traffic over an
.Dq AF_INET6
socket.
.Sh "EXAMPLES"
.Pp
Here are several example service entries for the various types of services:
.Bd -literal
ftp           stream tcp/46 nowait root  /usr/libexec/ftpd       ftpd -l
ntalk         dgram  udp    wait   root  /usr/libexec/ntalkd     ntalkd
tcpmux/+date  stream tcp    nowait guest /bin/date               date
tcpmux/phonebook stream tcp nowait guest /usr/local/bin/phonebook phonebook
.Ed
.Sh "ERROR MESSAGES"
The
.Nm inetd
server
logs error messages using
.Xr syslog 3 .
Important error messages and their explanations are:
.Bd -literal
\fIservice\fP/\fIprotocol\fP server failing (looping), service terminated.
.Ed
The number of requests for the specified service in the past minute
exceeded the limit. The limit exists to prevent a broken program
or a malicious user from swamping the system.
This message may occur for several reasons:
1) there are lots of hosts requesting the service within a short time period,
2) a 'broken' client program is requesting the service too frequently,
3) a malicious user is running a program to invoke the service in
a 'denial of service' attack, or
4) the invoked service program has an error that causes clients
to retry quickly.
Use the
.Fl R 
option,
as described above, to change the rate limit.
Once the limit is reached, the service will be
re-enabled automatically in 10 minutes.
.sp
.Bd -literal
\fIservice\fP/\fIprotocol\fP: No such user '\fIuser\fP', service ignored
\fIservice\fP/\fIprotocol\fP: getpwnam: \fIuser\fP: No such user
.Ed
No entry for 
.Em user
exists in the 
.Pa passwd
file. The first message
occurs when
.Nm inetd
(re)reads the configuration file. The second message occurs when the
service is invoked.
.sp
.Bd -literal
\fIservice\fP: can't set uid \fInumber\fP
\fIservice\fP: can't set gid \fInumber\fP
.Ed
The user or group ID for the entry's 
.Em user
is invalid.
.Bd -literal
\fIservice\fP/\fIprotoco\fP \fIuser\fP: Cannot set user context
.Ed
The
.Xr setusercontext 3
call failed for
.Em user .
.Bd -literal
cannot execute \fIserver\fP: \fImessage\fP
.Sh SEE ALSO
.Xr setusercontext 3 ,
.Xr faith 4 ,
.Xr ipsec 4 ,
.Xr comsat 8 ,
.Xr fingerd 8 ,
.Xr ftpd 8 ,
.Xr rexecd 8 ,
.Xr rlogind 8 ,
.Xr rshd 8 ,
.Xr telnetd 8 ,
.Xr tftpd 8
.Sh HISTORY
The
.Nm
command appeared in
.Bx 4.3 .
TCPMUX is based on code and documentation by Mark Lottor.
