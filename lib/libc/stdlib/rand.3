.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)rand.3	8.1 (Berkeley) 6/4/93
.\"
.Dd June 4, 1993
.Dt RAND 3
.Os
.Sh NAME
.Nm rand ,
.Nm rand_r ,
.Nm srand
.Nd bad random number generator
.Sh SYNOPSIS
.Fd #include <stdlib.h>
.Ft void
.Fn srand "unsigned seed"
.Ft int
.Fn rand void
.Ft int
.Fn rand_r "unsigned int *seed"
.Sh DESCRIPTION
.Bf -symbolic
These interfaces are obsoleted by random(3).
.Ef
.Pp
The
.Fn rand
function computes a sequence of pseudo-random integers in the range
of 0 to
.Dv RAND_MAX
(as defined by the header file
.Aq Pa stdlib.h ) .
.Pp
The
.Fn srand
function sets its argument as the seed for a new sequence of
pseudo-random numbers to be returned by
.Fn rand .
These sequences are repeatable by calling
.Fn srand
with the same seed value.
.Pp
If no seed value is provided, the 
.Fn rand
function is automatically seeded with a value of 1.
.Pp 
The
.Fn rand_r
function computes a sequence of pseudo-random integers as in
.Fn rand
but the value pointed to by
.Fa seed
is used to seed the random-number calculation.
.Pp
Calling 
.Fn rand
and
.Fn srand
within a multi-threaded application is supported and provides a single
process-specific random number sequence that is shared by the calling
threads.  The
.Fn rand_r
function may be used to provide a per-thread random number sequence.
.Pp
The generator is a linear congruential type
as described in
.Rs
.%B "The Art of Computer Programming: Vol. 2, Seminumerical Algorithms"
.%A Knuth
.%D 1981
.Re
Each successive term is determined by the formula:
.Dl x = x * 1103515245 + 12345
The modulus is achieved by using C's rules for unsigned arithmetic,
and is therefore a power of two.
By the mathematics governing such generators,
reducing this generator by a multiple of any smaller power of two
also reduces the corresponding sequence period.
For instance, the low bit of each successive term is alternately 0 and 1,
regardless of the seed.
In this sense, the upper bits of each number are
.Dq "more random"
than the lower bits.
Thus, although the
.Dv RAND_MAX
constant is 32767, the 
.Fn rand
and
.Fn rand_r
functions discard the lowest 16 bits of each term
and return the next 15 bits.
Users should discard additional low-order bits from the return value first,
or better yet, use one of the alternative generators such as
.Xr lrand48 3
or
.Xr random 3 .
.Sh SEE ALSO
.Xr lrand48 3 ,
.Xr random 3
.Sh STANDARDS
The
.Fn rand
and
.Fn srand
functions
conform to
.St -ansiC .
The 
.Fn rand_r
function conforms to 
.St -p1003.1c .
