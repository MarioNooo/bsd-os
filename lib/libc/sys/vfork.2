.\"	BSDI vfork.2,v 2.3 2000/09/15 16:07:01 donn Exp
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)vfork.2	8.1 (Berkeley) 6/4/93
.\"
.Dd September 14, 2000
.Dt VFORK 2
.Os BSD 4
.Sh NAME
.Nm vfork
.Nd "create a new process in a virtual memory efficient way
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft int
.Fn vfork void
.Sh DESCRIPTION
.Fn Vfork
creates a new process that shares the virtual memory of the current process.
.Fn Vfork
can be a more efficient replacement for
.Xr fork 2
when the purpose of
.Xr fork 2
would have been to create a new system context for an
.Xr execve 2 .
The parent process is suspended
until the child makes a successful call to
.Xr execve 2
or exits (either by calling
.Xr _exit 2
or by receiving a fatal signal).
.Pp
These rules of programming
.Em must
be followed in order to use
.Fn vfork
safely:
.Bl -bullet
.It
The function that calls
.Fn vfork
must
.Em not
return in the child process.
The child process must call
.Xr execve 2
or exit without returning.
Failure to observe this rule can result in
very mysterious core dumps or stack corruption in the parent process.
.It
The child process should call
.Xr _exit 2
rather than
.Xr exit 3
to exit explicitly.
The
.Xr exit 3
function flushes buffered I/O,
executes C++ destructor functions and
calls functions that have been registered using
.Xr atexit 3 .
Since the child process shares memory with the parent process,
these actions may inappropriately change the state of the parent process.
.It
Be
.Em very
careful about any action in the child that
might change the state of the parent in unexpected ways.
For example, a call to
.Xr setenv 3
in the child process after a call to
.Fn vfork
may change the environment list in both the parent and the child.
.El
.Pp
A call to
.Fn vfork
is exactly the same as a call to
.Xr sfork 2 ,
with parameters as follows:
.Bd -literal -offset indent
sfork(SF_MEM|SF_WAITCHILD, NULL, SIGCHLD)
.Ed
.Sh SEE ALSO
.Xr fork 2 ,
.Xr execve 2 ,
.Xr sfork 2 ,
.Xr sigaction 2 ,
.Xr wait 2 .
.Sh ERRORS
.Fn Vfork
will fail and no child process will be created if:
.Bl -tag -width [EAGAIN]
.It Bq Er EAGAIN
The system-imposed limit on the total
number of processes under execution would be exceeded.
This limit is configuration-dependent.
.It Bq Er EAGAIN
The system-imposed RLIMIT_NPROC resource limit
on the total number of
processes under execution by the invoking user would be exceeded.  See
.Xr setrlimit 2 .
.It Bq Er ENOMEM
There is insufficient swap space for the new process.
.El
.Sh BUGS
.Bf -symbolic
.Fn Vfork
is extremely easy to misuse.
.Ef
Unless your program really needs the efficiency advantage of
.Fn vfork ,
you should use
.Xr fork 2
instead.
.Pp
To avoid a possible deadlock situation,
processes that are children in the middle
of a
.Fn vfork
are never sent
.Dv SIGTTOU
or
.Dv SIGTTIN
signals; rather,
output or
.Xr ioctl 2
calls
are allowed
and input attempts result in an end-of-file indication.
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 3.0 .
