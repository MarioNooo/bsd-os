.\"	BSDI getrlimit.2,v 2.8 2000/07/07 22:25:32 polk Exp
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)getrlimit.2	8.1 (Berkeley) 6/4/93
.\"
.Dd June 4, 1993
.Dt GETRLIMIT 2
.Os BSD 4
.Sh NAME
.Nm getrlimit ,
.Nm setrlimit
.Nd control maximum system resource consumption
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <time.h>
.Fd #include <sys/resource.h>
.Ft int
.Fn getrlimit "int resource" "struct rlimit *rlp"
.Ft int
.Fn getprlimit "int idtype" "int id" "int resource" "struct rlimit *rlp"
.Ft int
.Fn setrlimit "int resource" "const struct rlimit *rlp"
.Ft int
.Fn setprlimit "int idtype" "int id" "int resource" "struct rlimit *rlp"
.Sh DESCRIPTION
Limits on the consumption of system resources by the a process
and each process it creates may be obtained with the
.Fn getrlimit
or
.Fn getprlimit
call, and set with the
.Fn setrlimit
or
.Fn setprlimit
call.  
.Pp
The
.Fa idtype
and
.Fa id
specify the target of the call.  The only
.Fa idtype
currently supported is
.Dv P_PID .
When the
.Fa idtype
is
.Dv P_PID
the
.Fa id
is the process id of the process for which the limits will be retrieved or set.
If the process id is zero then the current process is the target.
The
.Fa getrlimit
and
.Fa setrlimit
calls are the same as
.Fa getprlimit
and
.Fa setprlimit
with
.Fa idtype
set to
.Dv P_PID
and
.Fa id
set to 0.
The
.Fa resource
parameter is one of the following:
.Bl -tag -width RLIMIT_FSIZEAA
.It Li RLIMIT_CORE
The largest size (in bytes)
.Xr core
file that may be created.
.It Li RLIMIT_CPU
The maximum amount of cpu time (in seconds) to be used by
each process.
.It Li RLIMIT_DATA
The maximum size (in bytes) of the data segment for a process;
this defines how far a program may extend its break with the
.Xr sbrk 2
system call.
.It Li RLIMIT_FSIZE
The largest size (in bytes) file that may be created.
.It Li RLIMIT_MEMLOCK
The maximum size (in bytes) which a process may lock into memory
using the
.Xr mlock 2
function.
.It Li RLIMIT_NOFILE
The maximum number of open files for this process.
.It Li RLIMIT_NPROC
The maximum number of simultaneous processes for this user id.
.It Li RLIMIT_RSS
The maximum size (in bytes) to which a process's resident set size may
grow.
This imposes a limit on the amount of physical memory to be given to
a process; if memory is tight, the system will prefer to take memory
from processes that are exceeding their declared resident set size.
.It Li RLIMIT_STACK
The maximum size (in bytes) of the stack segment for a process;
this defines how far a program's stack segment may be extended.
Stack extension is performed automatically by the system.
.El
.Pp
A resource limit is specified as a soft limit and a hard limit.  When a
soft limit is exceeded a process may receive a signal (for example, if
the cpu time or file size is exceeded), but it will be allowed to
continue execution until it reaches the hard limit.  The 
.Em rlimit
structure is used to specify the hard and soft limits on a resource,
.Bd -literal -offset indent
struct rlimit {
	quad_t	rlim_cur;	/* current (soft) limit */
	quad_t	rlim_max;	/* hard limit */
};
.Ed
.Pp
Default values for the soft and hard limits are configured by login
classes in
.Pa /etc/login.conf
.Pq see Xr login.conf 8
at login or session creation time.
.Pp
Only the super-user may raise the maximum limits.  Other users
may only alter 
.Fa rlim_cur
within the range from 0 to 
.Fa rlim_max
or (irreversibly) lower
.Fa rlim_max .
.Pp
For a process to have permission to retrieve or set the limits for
another process, the real or effective user ID of the target process
must match that of the calling process or the user must have appropriate
privileges (such as given by a set-user-ID program or the user is the
super-user).
.Pp
An
.Dq infinite
value for a limit is defined as
.Dv RLIM_INFINITY .
This value should not be arbitrarily used to set the soft
limit to the hard limit; instead, use
.Nm getrlimit
to obtain the value of the hard limit.
.Pp
Because this information is stored in the per-process information,
this system call must be executed directly by the shell if it
is to affect all future processes created by the shell.
Most shells have a
.Ic limit , 
.Ic ulimit
or
.Ic unlimit
built-in command.
.Pp
The system refuses to extend the data or stack space when the limits
would be exceeded in the normal way: a
.Xr brk
or
.Xr sbrk
call will fail if the data space limit is reached.
When the stack limit is reached, the process receives
a segmentation fault
.Pq Dv SIGSEGV ;
if this signal is not
caught by a handler using the signal stack, this signal
will kill the process.
.Pp
A file I/O operation that would create a file larger that the process'
soft limit will cause the write to fail and a signal
.Dv SIGXFSZ
to be
generated; this normally terminates the process, but may be caught.  When
the soft cpu time limit is exceeded, a signal
.Dv SIGXCPU
is sent to the
offending process.
.Sh RETURN VALUES
A 0 return value indicates that the call succeeded, changing
or returning the resource limit.   A return value of -1 indicates
that an error occurred, and an error code is stored in the global
location
.Va errno .
.Sh EXAMPLES
To increase the soft limit on RLIMIT_NOFILE to the hard limit, use:
.Bd -literal -offset indent
if (getrlimit(RLIMIT_NOFILE, &rlim) != 0)
	err(1, "getrlimit(RLIMIT_NOFILE)");
rlim.rlim_cur = rlim.rlim_max;
if (setrlimit(RLIMIT_NOFILE, &rlim) != 0)
	err(1, "setrlimit(RLIMIT_NOFILE)")
.Ed
.Sh ERRORS
.Fn Getrlimit
and
.Fn setrlimit
will fail if:
.Bl -tag -width Er
.It Bq Er EFAULT
The address specified for
.Fa rlp
is invalid.
.It Bq Er EINVAL
One of the parameters was invalid.
.It Bq Er ESRCH
The requested
.Fa id
could not be found.
.It Bq Er EPERM
The limit specified to
.Fn setrlimit
would have
raised the maximum limit value, and the caller is not the super-user.
.El
.Sh SEE ALSO
.Xr bash 1 , 
.Xr quota 2 ,
.Xr sigaltstack 2 ,
.Xr sigvec 2 ,
.Xr setusercontext 3 ,
.Xr sysctl 3 ,
.Xr login.conf 5
.Sh HISTORY
The
.Nm
function call appeared in
.Bx 4.2 .
