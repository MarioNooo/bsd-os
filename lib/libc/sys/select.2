.\"	BSDI select.2,v 2.5 1997/12/02 20:38:25 karels Exp
.\"
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)select.2	8.2 (Berkeley) 3/25/94
.\"
.Dd March 25, 1994
.Dt SELECT 2
.Os BSD 4.2
.Sh NAME
.Nm pselect
.Nm select
.Nd synchronous I/O multiplexing
.Sh SYNOPSIS
.Fd #include <sys/types.h>
.Fd #include <sys/time.h>
.Fd #include <sys/select.h>
.Fd #include <signal.h>
.Ft int
.Fn pselect "int nfds" "fd_set *readfds" "fd_set *writefds" "fd_set *exceptfds" "const struct timespec *timeout" "const sigset_t *sigmask"
.Ft int
.Fn select "int nfds" "fd_set *readfds" "fd_set *writefds" "fd_set *exceptfds" "const struct timeval *timeout"
.Ft fd_set *
.Fn FD_ALLOC "int n"
.Ft void
.Fn FD_CLR "int fd" "fd_set *fdset"
.Ft void
.Fn FD_COPY "fd_set *from_fdset" "fd_set *to_fdset"
.Ft int
.Fn FD_ISSET "int fd" "fd_set *fdset"
.Ft void
.Fn FD_NCOPY "int n" "fd_set *from_fdset" "fd_set *to_fdset"
.Ft void
.Fn FD_NZERO "int n" "fd_set *fdset"
.Ft fd_set *
.Fn FD_REALLOC "fd_set *fdset" "int oldn" "int newn"
.Ft void
.Fn FD_SET "int fd" "fd_set *fdset"
.Ft void
.Fn FD_ZERO "fd_set *fdset"
.Sh DESCRIPTION
The
.Fn pselect
and
.Fn select
functions examine the I/O descriptor sets whose addresses are passed in
.Fa readfds ,
.Fa writefds ,
and
.Fa exceptfds
to see if some of their descriptors
are ready for reading, are ready for writing, or have an exceptional
condition pending, respectively.
The two functions are identical except for the type and format of the
.Fa timeout
value, and the additional
.Fa sigmask
parameter supplied to the
.Fn pselect
call.
The first
.Fa nfds
descriptors are checked in each set;
i.e., the descriptors from 0 through
.Fa nfds Ns No -1
in the descriptor sets are examined.
.Pp
The
.Fn pselect
and
.Fn select
functions replace the given descriptor sets with subsets consisting of
those descriptors that are ready for the requested operation,
and return the total number of ready descriptors in the sets.
.Pp
If
.Fa timeout
is a non-NULL pointer, it specifies a maximum interval to wait for the
selection to complete.  If 
.Fa timeout
is a NULL pointer, the select blocks indefinitely.
To poll the descriptors,
the
.Fa timeout
argument should be non-NULL, pointing to a zero-valued timespec
or timeval structure.
If the
.Fa sigmask
parameter to
.Fn pselect
is not NULL, it points to a signal mask that replaces the previous
signal mask for the process for the duration of the call,
and the previous mask is restored upon return; see
.Xr sigprocmask 3 .
This is normally used so that signals can be blocked while preparing
for a call to
.Fn pselect ,
and atomically unblocking the signals while selecting.
.Pp
Any of
.Fa readfds ,
.Fa writefds ,
and
.Fa exceptfds
may be given as NULL pointers if no descriptors are of interest.
.Pp
The descriptor sets are stored as bit fields in arrays of integers.
.Pp
The following macros are provided for, setting, clearing and testing
entries in the descriptor sets:
.Bl -tag -width XXXX
.It Fn FD_SET "int fd" "fd_set *fdset" ;
Sets the descriptor
.Fa fd
in the descriptor set
.Fa fdset .
.It Fn FD_CLR "int fd" "fd_set *fdset" ;
Unsets the descriptor
.Fa fd
in the descriptor set
.Fa fdset .
.It Fn FD_ISSET "int fd" "fd_set *fdset" ;
Returns non-zero if
.Fa fd
is a member of the descriptor set
.Fa fdset ,
zero otherwise.
.El
.Pp
Descriptor sets adequate to handle
.Dv FD_SETSIZE
descriptors may be declared with the
.Dv fd_set
type defined in
.Li <sys/select.h> .
.Dv FD_SETSIZE
is a constant defined by the header file
.Li <sys/select.h> ,
and is currently set to 256.
The following macros are provided for manipulating such descriptor sets:
.Bl -tag -width XXXX
.It Fn FD_COPY "fd_set *from_fdset" "fd_set *to_fdset" ;
Copies the descriptor set
.Fa from_fdset
to the descriptor set
.Fa to_fdset .
.It Fn FD_ZERO "fd_set *fdset" ;
Initializes the descriptor set
.Fa fdset
to the empty set.
.El
.Pp
The behavior of the
.Fn FD_COPY
and
.Fn FD_ZERO
macros is undefined if a descriptor value is greater than or equal to
.Dv FD_SETSIZE .
.Pp
As a process may have more file descriptors than the value of
.Dv FD_SETSIZE ,
the following additional macros are provided for creating and manipulating
such descriptor sets:
.Bl -tag -width XXXX
.It Fn FD_ALLOC "int n" ;
Allocate a descriptor set sufficient for
.Fa n
descriptors.
A pointer to the descriptor set is returned,
or NULL if the allocation failed.
The allocated descriptor set is initialized to the empty set.
The allocated descriptor set may be deallocated with the
.Fn free
function when it is no longer needed.
.It Fn FD_REALLOC "fd_set *fdset" "int oldn" "int newn" ;
Increase the size of a descriptor set previously allocated to be sufficient
for
.Fa oldn
descriptors to be sufficient for
.Fa newn
descriptors.
A pointer to the descriptor set is returned,
or NULL if the allocation failed.
The newly allocated portion of the descriptor set is initialized to the
empty set.
The allocated descriptor set may be deallocated with the
.Fn free
function when it is no longer needed.
.It Fn FD_NCOPY "int n" "fd_set *from_fdset" "fd_set *to_fdset" ;
Copies the descriptor set
.Fa from_fdset ,
allocated to be sufficient for
.Fa n
descriptors,
to the descriptor set
.Fa to_fdset .
.It Fn FD_NZERO "int n" "fd_set *fdset" ;
Initializes the descriptor set
.Fa fdset ,
allocated to be sufficient for
.Fa n
descriptors, to the empty set.
.El
.Sh RETURN VALUES
The
.Fn pselect
and
.Fn select
functions return the number of ready descriptors that are contained in
the descriptor sets,
or -1 if an error occurred.
If the time limit expires,
the functions
return 0.
If the functions
return with an error,
including one due to an interrupted call,
the descriptor sets will be unmodified.
.Sh ERRORS
An error return from
.Fn pselect
or
.Fn select
indicates:
.Bl -tag -width Er
.It Bq Er EBADF
One of the descriptor sets specified an invalid descriptor.
.It Bq Er EFAULT
One of the parameters points outside the allocated address space.
.It Bq Er EINTR
A signal was delivered before the time limit expired and
before any of the selected events occurred.
.It Bq Er EINVAL
The specified time limit is invalid.  One of its components is
negative or too large.
.El
.Pp
The macros
.Fn FD_ALLOC
and
.Fn FD_REALLOC
may fail and set errno for any of the errors specified for the library
function
.Xr malloc 3 .
.Sh SEE ALSO
.Xr accept 2 ,
.Xr connect 2 ,
.Xr gettimeofday 2 ,
.Xr read 2 ,
.Xr recv 2 ,
.Xr send 2 ,
.Xr write 2 ,
.Xr free 3
.Xr sigprocmask 3
.Sh STANDARDS
The
.Nm select
function call appeared in
.Bx 4.2 .
The
.Nm pselect
function appeared in BSD/OS 4.0, based on draft 6.6 of the 
POSIX networking standard, to become IEEE Std 1003.12.
Both functions are expected to conform to that standard.
