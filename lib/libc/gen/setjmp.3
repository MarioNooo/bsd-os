.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)setjmp.3	8.1 (Berkeley) 6/4/93
.\"
.Dd June 4, 1993
.Dt SETJMP 3
.Os BSD 4
.Sh NAME
.Nm setjmp ,
.Nm longjmp ,
.Nm _setjmp ,
.Nm _longjmp ,
.Nm sigsetjmp ,
.Nm siglongjmp
.Nd non-local jumps
.Sh SYNOPSIS
.Fd #include <setjmp.h>
.Ft int
.Fn setjmp "jmp_buf env"
.Ft void
.Fn longjmp "jmp_buf env" "int val"
.Ft int
.Fn _setjmp "jmp_buf env"
.Ft void
.Fn _longjmp "jmp_buf env" "int val"
.Ft int
.Fn sigsetjmp "sigjmp_buf env" "int savemask"
.Ft void
.Fn siglongjmp "sigjmp_buf env" "int val"
.Sh DESCRIPTION
The
.Fn setjmp
function saves information about its calling environment in
.Fa env ,
and returns 0.
.Pp
The
.Fn longjmp
function restores the environment saved by the last call to
.Fn setjmp
with
.Fa env
as an argument.
It then returns so that program execution continues as if the
.Fn setjmp
invocation had returned
.Fa val ,
instead of 0.
The
.Fn longjmp
function may not specify a return value of 0.
If
.Fn longjmp
is called with a
.Fa val
of 0, program execution will continue as if the
.Fn setjmp
invocation had returned 1.
.Pp
All accessible objects have values as of the time the
.Fn longjmp
routine was called,
except that the values of objects of automatic storage invocation duration,
that do not have the
.Em volatile
type and have been changed between the
.Fn setjmp
invocation and
.Fn longjmp
call, are indeterminate.
.Pp
The
.Fn setjmp Ns / Ns Fn longjmp
routines save and restore the signal mask.
(See
.Fn sigprocmask 2 . )
.Pp
Calling the
.Fn longjmp
routine after the routine which called
.Fn setjmp
returns will result in undefined behavior.
.Pp
The
.Fn _setjmp Ns / Ns Fn _longjmp
routines are identical to
.Fn setjmp Ns / Ns Fn longjmp ,
except that they do not save and restore the signal mask.
.Pp
The
.Fn sigsetjmp Ns / Ns Fn siglongjmp
routines are identical to
.Fn setjmp Ns / Ns Fn longjmp
if the argument
.Fa savemask
is non-zero, otherwise they are identical to
.Fn _setjmp Ns / Ns Fn _longjmp .
.Pp
Pairs of calls may be intermixed, e.g., both
.Fn setjmp Ns / Ns Fn longjmp
and
.Fn sigsetjmp Ns / Ns Fn siglongjmp
pairs may be used in the same program.
Individual calls should not be intermixed, e.g. the
.Fa env
argument to
.Fn setjmp
may not be passed to
.Fn siglongjmp .
.Sh ERRORS
If the
.Fn longjmp
routines detect that the contents of
.Fa env
are corrupted,
or correspond to an environment that has already returned,
.Fn longjmp
will call
.Xr abort 2 .
There is no guarantee such corruption or misuse will be detected.
.Sh SEE ALSO
.Xr sigprocmask 2
.Sh STANDARDS
The
.Fn setjmp
and
.Fn longjmp
functions conform to
.St -ansiC .
The
.Fn sigsetjmp
and
.Fn siglongjmp
functions conform to
.St -p1003.1-88 .
