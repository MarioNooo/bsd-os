.\"
.\" Copyright (c) 1996 Berkeley Software Design, Inc. All rights reserved.
.\" The Berkeley Software Design Inc. software License Agreement specifies
.\" the terms and conditions for redistribution.
.\"
.\" BSDI pthread_cond.3,v 1.3 1996/12/12 03:03:42 donn Exp
.\" 
.Dd June 3, 1996
.Dt PTHREAD_COND 3
.Os BSD 4
.Sh NAME
.Nm pthread_cond_init ,
.Nm pthread_cond_destroy ,
.Nm pthread_cond_wait ,
.Nm pthread_cond_timedwait ,
.Nm pthread_cond_signal ,
.Nm pthread_cond_broadcast
.Nd manipulate pthread condition variables
.Sh SYNOPSIS
.Fd #include <pthread.h>
.Fd #include <time.h>
.Ft int
.Fn pthread_cond_init "pthread_cond_t *cond" "const pthread_condattr_t *attr"
.Ft int
.Fn pthread_cond_destroy "pthread_cond_t *cond" 
.Ft int
.Fn pthread_cond_wait "pthread_cond_t *cond" "pthread_mutex_t *mutex"
.Ft int
.Fn pthread_cond_timedwait "pthread_cond_t *cond" "pthread_mutex_t *mutex" "const struct timespec *abstime"
.Ft int
.Fn pthread_cond_signal "pthread_cond_t *cond" 
.Ft int
.Fn pthread_cond_broadcast "pthread_cond_t *cond" 
.Pp
.Va pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
.Sh DESCRIPTION
.Pp
This interface is defined by
.St -p1003.1c .
.Pp
The 
.Fn pthread_cond_init
function initializes the condition variable pointed to by
.Fa cond
with condition attributes specified by
.Fa attr .
If
.Fa attr
is 
.Dv NULL
the default condition attributes are used.  
All condition variables should be initialized either statically using
.Dv PTHREAD_COND_INITIALIZER
or dynamically by calling
.Fn pthread_cond_init .
After successful initialization, the condition variable is available for use.
.Pp
The
.Fn pthread_cond_destroy
function destroys the condition variable pointed to by
.Fa cond ,
returning it to an uninitialized state.  A destroyed condition variable
may be re-initialized by calling
.Fn pthread_cond_init .
.Pp
The
.Fn pthread_cond_wait
function is used to block on a condition variable.  It is called with 
.Fa mutex 
locked by the calling thread.  The mutex is released and the calling
thread is blocked atomically waiting for the associated condition to
be signalled by another thread. Upon successful completion the
.Fa mutex
is re-locked and owned by the calling thread.
The predicate associated with the condition variable should be tested 
and the 
.Fn pthread_cond_wait
call repeated if necessary.
.Pp
The
.Fn pthread_cond_timedwait
function performs exactly as does
.Fn pthread_cond_wait
except that an absolute timeout value is associated with the call.
Upon return (either because the condition was signalled or because a
timeout occurred) the 
.Fa mutex 
is re-acquired.
.Pp
The 
.Fn pthread_cond_signal
function unblocks at least one of the threads currently blocked
on 
.Fa cond ,
if any are available.
If more than one thread is blocked, the scheduling priorities of the 
blocked threads determine the order that blocked threads are awakened.
.Pp
The
.Fn pthread_cond_broadcast
function unblocks all threads that are currently blocked on
.Fa cond .
.Sh RETURN VALUES
On success the
.Nm pthread_cond
functions all return a 0.  A non-zero result indicates
that an error occurred.
.Sh ERRORS
The
.Nm pthread_cond
functions may fail and return one of the following errors:
.Bl -tag -width Er
.It Bq Er EAGAIN
The system lacked the necessary resources (other than memory)
to fulfill the requested operation.
.It Bq Er EBUSY
In a call to
.Fn pthread_cond_init
an attempt to re-initialize a previously initialized condition
variable that had not been destroyed was detected.
In a call to
.Fn pthread_cond_destroy
an attempt to destroy a condition variable that is currently in 
use was detected.
.It Bq Er EINVAL
The value of a function argument is invalid.
.It Bq Er ENOMEM
Insufficient memory exists to fulfill the requested operation.
.It Bq Er ETIMEDOUT
In a call to
.Fn pthread_cond_timedwait
the time specified in 
.Fa abstime
expired before the condition variable was signalled.
.Sh SEE ALSO
.Xr pthreads 3 ,
.Xr pthread_mutex 3 ,
.Xr pthread_create 3
.Sh STANDARDS
The
.Nm pthread_cond
functions conform to
.St -p1003.1c .
.Sh HISTORY
The
.Nm pthread_cond
functions first appeared in BSD/OS 3.0.
.Sh BUGS
Condition attributes are not supported. The
.Fa attr
argument to 
.Fn pthread_cond_init
must be passed as
.Fa NULL .
