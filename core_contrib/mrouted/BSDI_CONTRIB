Software Package:       
	mrouted

Release/Version:
	3.8

Retrieved from:
	ftp://parcftp.xerox.com/pub/net-research/ipmulti/mrouted3.8.tar.gz

Bug reports:
	This software package is maintained by the software contributor,
	not BSDI.  Please send any bug reports to both support@BSDI.COM
	and Bill Fenner <fenner@parc.xerox.com>.

Comments:

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Modifications to this version made by BSDI:

Added makefile to translate bsd targets.

Patch for "time_t":

diff -c -2 -r1.1.1.1 main.c
*** main.c	1995/12/14 19:28:10	1.1.1.1
--- main.c	1998/09/26 01:37:08
***************
*** 676,679 ****
--- 676,680 ----
      char tbuf[20];
      struct timeval now;
+     time_t tnow;
      struct tm *thyme;
  
***************
*** 692,695 ****
--- 693,697 ----
      char tbuf[20];
      struct timeval now;
+     time_t tnow;
      struct tm *thyme;
  
***************
*** 706,710 ****
  	default:
  	    gettimeofday(&now,NULL);
! 	    thyme = localtime(&now.tv_sec);
  	    strftime(tbuf, sizeof(tbuf), "%X.%%03d ", thyme);
  	    fprintf(stderr, tbuf, now.tv_usec / 1000);
--- 708,713 ----
  	default:
  	    gettimeofday(&now,NULL);
! 	    tnow = now.tv_sec;
! 	    thyme = localtime(&tnow);
  	    strftime(tbuf, sizeof(tbuf), "%X.%%03d ", thyme);
  	    fprintf(stderr, tbuf, now.tv_usec / 1000);


Fix inet_cksum() routine to work properly with EGCS (aliasing is not
guaranteed to work unless unions are used).

Index: defs.h
===================================================================
RCS file: /master/contrib/mrouted/defs.h,v
retrieving revision 1.1.1.1
diff -c -r1.1.1.1 defs.h
*** defs.h	1995/12/14 19:28:09	1.1.1.1
--- defs.h	1999/11/15 16:12:30
***************
*** 39,44 ****
--- 39,45 ----
  
  /*XXX*/
  typedef u_int u_int32;
+ typedef u_short u_int16;
  
  #ifndef __P
  #ifdef __STDC__
***************
*** 248,254 ****
  extern char *		inet_fmt __P((u_int32 addr, char *s));
  extern char *		inet_fmts __P((u_int32 addr, u_int32 mask, char *s));
  extern u_int32		inet_parse __P((char *s));
! extern int		inet_cksum __P((u_short *addr, u_int len));
  
  /* prune.c */
  extern unsigned		kroutes;
--- 249,255 ----
  extern char *		inet_fmt __P((u_int32 addr, char *s));
  extern char *		inet_fmts __P((u_int32 addr, u_int32 mask, char *s));
  extern u_int32		inet_parse __P((char *s));
! extern int		inet_cksum __P((void *addr, u_int len));
  
  /* prune.c */
  extern unsigned		kroutes;
Index: igmp.c
===================================================================
RCS file: /master/contrib/mrouted/igmp.c,v
retrieving revision 1.1.1.1
diff -c -r1.1.1.1 igmp.c
*** igmp.c	1995/12/14 19:28:10	1.1.1.1
--- igmp.c	1999/11/15 16:12:56
***************
*** 322,329 ****
      igmp->igmp_code         = code;
      igmp->igmp_group.s_addr = group;
      igmp->igmp_cksum        = 0;
!     igmp->igmp_cksum        = inet_cksum((u_short *)igmp,
! 					 IGMP_MINLEN + datalen);
  
      if (IN_MULTICAST(ntohl(dst))) {
  	k_set_if(src);
--- 322,328 ----
      igmp->igmp_code         = code;
      igmp->igmp_group.s_addr = group;
      igmp->igmp_cksum        = 0;
!     igmp->igmp_cksum        = inet_cksum(igmp, IGMP_MINLEN + datalen);
  
      if (IN_MULTICAST(ntohl(dst))) {
  	k_set_if(src);
Index: inet.c
===================================================================
RCS file: /master/contrib/mrouted/inet.c,v
retrieving revision 1.1.1.1
diff -c -r1.1.1.1 inet.c
*** inet.c	1995/12/14 19:28:10	1.1.1.1
--- inet.c	1999/11/15 16:13:28
***************
*** 176,207 ****
  
  
  /*
!  * inet_cksum extracted from:
!  *			P I N G . C
!  *
!  * Author -
!  *	Mike Muuss
!  *	U. S. Army Ballistic Research Laboratory
!  *	December, 1983
!  * Modified at Uc Berkeley
!  *
!  * (ping.c) Status -
!  *	Public Domain.  Distribution Unlimited.
!  *
!  *			I N _ C K S U M
!  *
!  * Checksum routine for Internet Protocol family headers (C Version)
!  *
   */
  int
  inet_cksum(addr, len)
! 	u_short *addr;
  	u_int len;
  {
! 	register int nleft = (int)len;
! 	register u_short *w = addr;
! 	u_short answer = 0;
! 	register int sum = 0;
  
  	/*
  	 *  Our algorithm is simple, using a 32 bit accumulator (sum),
--- 176,190 ----
  
  
  /*
!  * inet_cksum derrived from code in tcpdump.
   */
  int
  inet_cksum(addr, len)
! 	void *addr;
  	u_int len;
  {
! 	u_int16 *w = addr;
! 	u_int32 sum = 0;
  
  	/*
  	 *  Our algorithm is simple, using a 32 bit accumulator (sum),
***************
*** 209,230 ****
  	 *  back all the carry bits from the top 16 bits into the lower
  	 *  16 bits.
  	 */
! 	while (nleft > 1)  {
  		sum += *w++;
- 		nleft -= 2;
- 	}
  
  	/* mop up an odd byte, if necessary */
! 	if (nleft == 1) {
! 		*(u_char *) (&answer) = *(u_char *)w ;
! 		sum += answer;
! 	}
  
  	/*
  	 * add back carry outs from top 16 bits to low 16 bits
  	 */
  	sum = (sum >> 16) + (sum & 0xffff);	/* add hi 16 to low 16 */
! 	sum += (sum >> 16);			/* add carry */
! 	answer = ~sum;				/* truncate to 16 bits */
! 	return (answer);
  }
--- 192,208 ----
  	 *  back all the carry bits from the top 16 bits into the lower
  	 *  16 bits.
  	 */
! 	for (; len > 1; len -= 2)
  		sum += *w++;
  
  	/* mop up an odd byte, if necessary */
! 	if (len == 1)
! 		sum += ntohs(*(u_char *)w << 8);
  
  	/*
  	 * add back carry outs from top 16 bits to low 16 bits
  	 */
  	sum = (sum >> 16) + (sum & 0xffff);	/* add hi 16 to low 16 */
! 	sum += sum >> 16;
! 	return (0xffff & ~sum);
  }
Index: defs.h
===================================================================
RCS file: /master/contrib/mrouted/defs.h,v
retrieving revision 1.1.1.1
diff -c -r1.1.1.1 defs.h
*** defs.h	1995/12/14 19:28:09	1.1.1.1
--- defs.h	1999/11/15 16:12:30
***************
*** 39,44 ****
--- 39,45 ----
  
  /*XXX*/
  typedef u_int u_int32;
+ typedef u_short u_int16;
  
  #ifndef __P
  #ifdef __STDC__
***************
*** 248,254 ****
  extern char *		inet_fmt __P((u_int32 addr, char *s));
  extern char *		inet_fmts __P((u_int32 addr, u_int32 mask, char *s));
  extern u_int32		inet_parse __P((char *s));
! extern int		inet_cksum __P((u_short *addr, u_int len));
  
  /* prune.c */
  extern unsigned		kroutes;
--- 249,255 ----
  extern char *		inet_fmt __P((u_int32 addr, char *s));
  extern char *		inet_fmts __P((u_int32 addr, u_int32 mask, char *s));
  extern u_int32		inet_parse __P((char *s));
! extern int		inet_cksum __P((void *addr, u_int len));
  
  /* prune.c */
  extern unsigned		kroutes;
Index: igmp.c
===================================================================
RCS file: /master/contrib/mrouted/igmp.c,v
retrieving revision 1.1.1.1
diff -c -r1.1.1.1 igmp.c
*** igmp.c	1995/12/14 19:28:10	1.1.1.1
--- igmp.c	1999/11/15 16:12:56
***************
*** 322,329 ****
      igmp->igmp_code         = code;
      igmp->igmp_group.s_addr = group;
      igmp->igmp_cksum        = 0;
!     igmp->igmp_cksum        = inet_cksum((u_short *)igmp,
! 					 IGMP_MINLEN + datalen);
  
      if (IN_MULTICAST(ntohl(dst))) {
  	k_set_if(src);
--- 322,328 ----
      igmp->igmp_code         = code;
      igmp->igmp_group.s_addr = group;
      igmp->igmp_cksum        = 0;
!     igmp->igmp_cksum        = inet_cksum(igmp, IGMP_MINLEN + datalen);
  
      if (IN_MULTICAST(ntohl(dst))) {
  	k_set_if(src);
Index: inet.c
===================================================================
RCS file: /master/contrib/mrouted/inet.c,v
retrieving revision 1.1.1.1
diff -c -r1.1.1.1 inet.c
*** inet.c	1995/12/14 19:28:10	1.1.1.1
--- inet.c	1999/11/15 16:13:28
***************
*** 176,207 ****
  
  
  /*
!  * inet_cksum extracted from:
!  *			P I N G . C
!  *
!  * Author -
!  *	Mike Muuss
!  *	U. S. Army Ballistic Research Laboratory
!  *	December, 1983
!  * Modified at Uc Berkeley
!  *
!  * (ping.c) Status -
!  *	Public Domain.  Distribution Unlimited.
!  *
!  *			I N _ C K S U M
!  *
!  * Checksum routine for Internet Protocol family headers (C Version)
!  *
   */
  int
  inet_cksum(addr, len)
! 	u_short *addr;
  	u_int len;
  {
! 	register int nleft = (int)len;
! 	register u_short *w = addr;
! 	u_short answer = 0;
! 	register int sum = 0;
  
  	/*
  	 *  Our algorithm is simple, using a 32 bit accumulator (sum),
--- 176,190 ----
  
  
  /*
!  * inet_cksum derrived from code in tcpdump.
   */
  int
  inet_cksum(addr, len)
! 	void *addr;
  	u_int len;
  {
! 	u_int16 *w = addr;
! 	u_int32 sum = 0;
  
  	/*
  	 *  Our algorithm is simple, using a 32 bit accumulator (sum),
***************
*** 209,230 ****
  	 *  back all the carry bits from the top 16 bits into the lower
  	 *  16 bits.
  	 */
! 	while (nleft > 1)  {
  		sum += *w++;
- 		nleft -= 2;
- 	}
  
  	/* mop up an odd byte, if necessary */
! 	if (nleft == 1) {
! 		*(u_char *) (&answer) = *(u_char *)w ;
! 		sum += answer;
! 	}
  
  	/*
  	 * add back carry outs from top 16 bits to low 16 bits
  	 */
  	sum = (sum >> 16) + (sum & 0xffff);	/* add hi 16 to low 16 */
! 	sum += (sum >> 16);			/* add carry */
! 	answer = ~sum;				/* truncate to 16 bits */
! 	return (answer);
  }
--- 192,208 ----
  	 *  back all the carry bits from the top 16 bits into the lower
  	 *  16 bits.
  	 */
! 	for (; len > 1; len -= 2)
  		sum += *w++;
  
  	/* mop up an odd byte, if necessary */
! 	if (len == 1)
! 		sum += ntohs(*(u_char *)w << 8);
  
  	/*
  	 * add back carry outs from top 16 bits to low 16 bits
  	 */
  	sum = (sum >> 16) + (sum & 0xffff);	/* add hi 16 to low 16 */
! 	sum += sum >> 16;
! 	return (0xffff & ~sum);
  }
