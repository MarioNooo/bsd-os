Software Package:       
	tcpd

Release/Version:
        7.3

Retrieved from:
        ftp://ftp.win.tue.nl/pub/security/tcp_wrappers_7.3.tar.gz

Bug reports:
        This software package is maintained by:

	    Wietse Venema (wietse@wzv.win.tue.nl),
	    Department of Mathematics and Computing Science,
	    Eindhoven University of Technology,
	    The Netherlands.

    	Please send any bug reports to both support@BSDI.COM and
	wietse@wzv.win.tue.nl.

    	Any problems with the "exec" or "nolog" options should only
	be directed to support@BSDI.COM.

Comments:

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Modifications to this version made by BSDI:

diff -c tcp_wrappers_7.3/./Makefile ./Makefile
*** tcp_wrappers_7.3/./Makefile	Sun Feb 11 10:01:24 1996
--- ./Makefile	Thu Mar 28 10:34:43 1996
***************
*** 1,5 ****
--- 1,36 ----
  # @(#) Makefile 1.19 96/02/11 17:01:23
  
+ .SUFFIXES: .o .c .8 .7 .6 .5 .4 .3 .2 .1 .0 .ps
+ 
+ INSTDIR=${DESTDIR}/usr/libexec
+ BINDIR=${INSTDIR}/tcpd_bin
+ MANDIR=${DESTDIR}/usr/share/man/cat
+ LIBDIR=${DESTDIR}/usr/lib
+ 
+ all:	bsdos hosts_access.0 hosts_access.0 hosts_options.0 tcpd.0 tcpdchk.0 \
+ 	    tcpdmatch.0
+ 
+ install:
+ 	install -c -s -o bin -g bin -m 555 tcpd ${INSTDIR}
+ 	install -c -s -o bin -g bin -m 555 \
+ 	    tcpdmatch try-from safe_finger tcpdchk ${BINDIR}
+ 	install -c -o bin -g bin -m 444 hosts_access.0 ${MANDIR}3
+ 	install -c -o bin -g bin -m 444 hosts_access.0 hosts_options.0 \
+ 	    ${MANDIR}5
+ 	install -c -o bin -g bin -m 444 tcpd.0 tcpdchk.0 ${MANDIR}8
+ 	install -c -o bin -g bin -m 444 libwrap.a ${LIBDIR}
+ 
+ cleandir: clean
+ 
+ depend mansourceinstall obj objdir tags:
+ 
+ 
+ .8.0 .7.0 .6.0 .5.0 .4.0 .3.0 .2.0 .1.0:
+ 	groff -mtty-char -Tascii -man ${.IMPSRC} > ${.TARGET}
+ 
+ .8.ps .7.ps .6.ps .5.ps .4.ps .3.ps .2.ps .1.ps:
+ 	groff -Tps -man ${.IMPSRC} > ${.TARGET}
+ 
  what:
  	@echo
  	@echo "Usage: edit the REAL_DAEMON_DIR definition in the Makefile then:"
***************
*** 46,52 ****
  #REAL_DAEMON_DIR=/usr/sbin
  #
  # BSD 4.4
! #REAL_DAEMON_DIR=/usr/libexec
  #
  # HP-UX SCO Unicos
  #REAL_DAEMON_DIR=/etc
--- 77,83 ----
  #REAL_DAEMON_DIR=/usr/sbin
  #
  # BSD 4.4
! REAL_DAEMON_DIR=/usr/libexec
  #
  # HP-UX SCO Unicos
  #REAL_DAEMON_DIR=/etc
***************
*** 130,139 ****
  	NETGROUP=-DNETGROUP TLI= SYSTYPE="-systype bsd43" all
  
  # Free bsd and linux by default have no NIS.
! 386bsd netbsd:
  	@make REAL_DAEMON_DIR=$(REAL_DAEMON_DIR) STYLE=$(STYLE) \
  	LIBS= RANLIB=ranlib ARFLAGS=rv AUX_OBJ= NETGROUP= TLI= \
! 	EXTRA_CFLAGS=-DSYS_ERRLIST_DEFINED VSYSLOG= all
  
  freebsd:
  	@make REAL_DAEMON_DIR=$(REAL_DAEMON_DIR) STYLE=$(STYLE) \
--- 161,170 ----
  	NETGROUP=-DNETGROUP TLI= SYSTYPE="-systype bsd43" all
  
  # Free bsd and linux by default have no NIS.
! 386bsd netbsd bsdos:
  	@make REAL_DAEMON_DIR=$(REAL_DAEMON_DIR) STYLE=$(STYLE) \
  	LIBS= RANLIB=ranlib ARFLAGS=rv AUX_OBJ= NETGROUP= TLI= \
! 	EXTRA_CFLAGS=-DSYS_ERRLIST_DEFINED VSYSLOG= other
  
  freebsd:
  	@make REAL_DAEMON_DIR=$(REAL_DAEMON_DIR) STYLE=$(STYLE) \
***************
*** 361,367 ****
  # the ones provided with this source distribution. The environ.c module
  # implements setenv(), getenv(), and putenv().
  
! AUX_OBJ= setenv.o
  #AUX_OBJ= environ.o
  #AUX_OBJ= environ.o strcasecmp.o
  
--- 392,398 ----
  # the ones provided with this source distribution. The environ.c module
  # implements setenv(), getenv(), and putenv().
  
! #AUX_OBJ= setenv.o
  #AUX_OBJ= environ.o
  #AUX_OBJ= environ.o strcasecmp.o
  
***************
*** 418,424 ****
  # host name aliases. Compile with -DSOLARIS_24_GETHOSTBYNAME_BUG to work
  # around this. The workaround does no harm on other Solaris versions.
  
! BUGS = -DGETPEERNAME_BUG -DBROKEN_FGETS
  #BUGS = -DGETPEERNAME_BUG -DBROKEN_FGETS -DINET_ADDR_BUG
  #BUGS = -DGETPEERNAME_BUG -DBROKEN_FGETS -DSOLARIS_24_GETHOSTBYNAME_BUG
  
--- 449,455 ----
  # host name aliases. Compile with -DSOLARIS_24_GETHOSTBYNAME_BUG to work
  # around this. The workaround does no harm on other Solaris versions.
  
! #BUGS = -DGETPEERNAME_BUG -DBROKEN_FGETS
  #BUGS = -DGETPEERNAME_BUG -DBROKEN_FGETS -DINET_ADDR_BUG
  #BUGS = -DGETPEERNAME_BUG -DBROKEN_FGETS -DSOLARIS_24_GETHOSTBYNAME_BUG
  
***************
*** 436,442 ****
  # If your system supports vsyslog(), comment out the following definition.
  # If in doubt leave it in, it won't harm.
  
! VSYSLOG	= -Dvsyslog=myvsyslog
  
  # End of the system dependencies.
  #################################
--- 467,473 ----
  # If your system supports vsyslog(), comment out the following definition.
  # If in doubt leave it in, it won't harm.
  
! #VSYSLOG	= -Dvsyslog=myvsyslog
  
  # End of the system dependencies.
  #################################
***************
*** 455,461 ****
  # Uncomment the next definition to turn on the language extensions
  # (examples: allow, deny, banners, twist and spawn).
  # 
! #STYLE	= -DPROCESS_OPTIONS	# Enable language extensions.
  
  ################################################################
  # Optional: Changing the default disposition of logfile records
--- 486,492 ----
  # Uncomment the next definition to turn on the language extensions
  # (examples: allow, deny, banners, twist and spawn).
  # 
! STYLE	= -DPROCESS_OPTIONS	# Enable language extensions.
  
  ################################################################
  # Optional: Changing the default disposition of logfile records
***************
*** 478,484 ****
  #
  # The LOG_XXX names below are taken from the /usr/include/syslog.h file.
  
! FACILITY= LOG_MAIL	# LOG_MAIL is what most sendmail daemons use
  
  # The syslog priority at which successful connections are logged.
  
--- 509,515 ----
  #
  # The LOG_XXX names below are taken from the /usr/include/syslog.h file.
  
! FACILITY= LOG_DAEMON
  
  # The syslog priority at which successful connections are logged.
  
***************
*** 494,500 ****
  # off by default because it causes problems on sites that don't use DNS
  # and with Solaris < 2.4.
  #
! # DOT= -DAPPEND_DOT
  
  ##################################################
  # Optional: Always attempt remote username lookups
--- 525,531 ----
  # off by default because it causes problems on sites that don't use DNS
  # and with Solaris < 2.4.
  #
! DOT= -DAPPEND_DOT
  
  ##################################################
  # Optional: Always attempt remote username lookups
***************
*** 611,617 ****
  #
  # Uncomment the following macro definition if your getsockopt() is OK.
  #
! # KILL_OPT= -DKILL_IP_OPTIONS
  
  ## End configuration options
  ############################
--- 642,648 ----
  #
  # Uncomment the following macro definition if your getsockopt() is OK.
  #
! KILL_OPT= -DKILL_IP_OPTIONS
  
  ## End configuration options
  ############################
***************
*** 648,654 ****
  
  LIB	= libwrap.a
  
! all other: config-check tcpd tcpdmatch try-from safe_finger tcpdchk
  
  # Invalidate all object files when the compiler options (CFLAGS) have changed.
  
--- 679,685 ----
  
  LIB	= libwrap.a
  
! other: config-check tcpd tcpdmatch try-from safe_finger tcpdchk
  
  # Invalidate all object files when the compiler options (CFLAGS) have changed.
  
***************
*** 700,707 ****
  	$(ARCHIVE) $(KIT)
  
  clean:
! 	rm -f tcpd miscd safe_finger tcpdmatch tcpdchk try-from *.[oa] core \
! 	cflags
  
  tidy:	clean
  	chmod -R a+r .
--- 731,738 ----
  	$(ARCHIVE) $(KIT)
  
  clean:
! 	rm -f tcpd miscd safe_finger tcpdmatch tcpdchk try-from *.[oa] *.core \
! 	cflags *.0
  
  tidy:	clean
  	chmod -R a+r .
diff -c tcp_wrappers_7.3/./hosts_options.5 ./hosts_options.5
*** tcp_wrappers_7.3/./hosts_options.5	Wed Dec 28 10:42:29 1994
--- ./hosts_options.5	Fri Mar 29 17:52:13 1996
***************
*** 103,108 ****
--- 103,112 ----
  Warning:  in case of UDP services, do not twist to commands that use
  the standard I/O or the read(2)/write(2) routines to communicate with
  the client process; UDP requires other I/O primitives.
+ .IP "exec command [arguments ...]"
+ Replace the command and arguments of the command to run.
+ The %<letter> expansions described in the hosts_access(5) manual page
+ are preformed on the command and arguments.
  .SH NETWORK OPTIONS
  .IP "keepalive"
  Causes the server to periodically send a message to the client.  The
***************
*** 155,160 ****
--- 159,168 ----
  "kmem"). The first form is useful with inetd implementations that run
  all services with root privilege. The second form is useful for
  services that need special group privileges only.
+ .IP "nolog"
+ Do not do the normal logging of success or rejection.
+ This is useful if you are not particularly interested in accesses from
+ your local network, but do want to log accesses from outside networks.
  .SH DIAGNOSTICS
  When a syntax error is found in an access control rule, the error
  is reported to the syslog daemon; further options will be ignored,
diff -c tcp_wrappers_7.3/./options.c ./options.c
*** tcp_wrappers_7.3/./options.c	Sun Feb 11 10:01:32 1996
--- ./options.c	Fri Mar 29 16:46:27 1996
***************
*** 60,65 ****
--- 60,68 ----
  
  int     dry_run = 0;			/* flag set in verification mode */
  extern jmp_buf tcpd_buf;		/* tcpd_jump() support */
+ int	nolog = 0;
+ int	exec_argc = 0;
+ char	*exec_argv[64] = { 0, };
  
  /* Options parser support. */
  
***************
*** 85,90 ****
--- 88,95 ----
  static void allow_option();		/* execute "allow" option */
  static void deny_option();		/* execute "deny" option */
  static void banners_option();		/* execute "banners path" option */
+ static void exec_option();		/* execute "exec command" option */
+ static void nolog_option();		/* execute "nolog" option */
  
  /* Structure of the options table. */
  
***************
*** 122,127 ****
--- 127,134 ----
      "allow", allow_option, USE_LAST,
      "deny", deny_option, USE_LAST,
      "banners", banners_option, NEED_ARG,
+     "exec", exec_option, NEED_ARG | EXPAND_ARG,
+     "nolog", nolog_option, 0,
      0,
  };
  
***************
*** 618,621 ****
--- 625,689 ----
  	}
      }
      return (start ? (end[1] = 0, start) : cp);
+ }
+ 
+ static void nolog_option(value, request)
+ char   *value;
+ struct request_info *request;
+ {
+       nolog = 1;
+ }
+ 
+ static void exec_option(value, request)
+ char   *value;
+ struct request_info *request;
+ {
+     char *buf = strdup(value);
+ 
+     register char *b = buf;
+     register char *p;
+ 
+     if (resident > 0)
+ 	tcpd_jump("exec option in resident process");
+ 
+     if (!buf)
+       goto failed;
+ 
+     exec_argc = 0;
+ 
+     while (*buf) {
+       while (*buf == ' ' || *buf == '\t')
+           ++buf;
+       if (*buf) {
+           p = b = buf;
+ 
+           exec_argv[exec_argc++] = buf;
+           if (exec_argc == 64) {
+               --exec_argc;
+               break;
+           }
+ 
+           while (*p && !(*p == ' ' || *p == '\t')) {
+               if (*p == '"' || *p == '\'') {
+                   char ec = *p;
+                   while (*++p && *p != ec)
+                       *b++ = *p++;
+                   if (*p)
+                       ++p;
+               } else
+                   *b++ = *p++;
+           }
+           if (*p)
+                   ++p;
+           *b = 0;
+           buf = p;
+       }
+     }
+     exec_argv[exec_argc] = (char *)0;
+     return;
+ failed:
+     exec_argc = 0;
+     exec_argv[0] = 0;
+     tcpd_jump("failed to create path to execute");
+     /* NOTREACHED */
  }
diff -c tcp_wrappers_7.3/./refuse.c ./refuse.c
*** tcp_wrappers_7.3/./refuse.c	Wed Dec 28 10:42:40 1994
--- ./refuse.c	Thu Mar 28 22:32:57 1996
***************
*** 25,31 ****
  void    refuse(request)
  struct request_info *request;
  {
!     syslog(deny_severity, "refused connect from %s", eval_client(request));
      clean_exit(request);
      /* NOTREACHED */
  }
--- 25,32 ----
  void    refuse(request)
  struct request_info *request;
  {
!     if (!nolog)
! 	syslog(deny_severity, "refused connect from %s", eval_client(request));
      clean_exit(request);
      /* NOTREACHED */
  }
diff -c tcp_wrappers_7.3/./socket.c ./socket.c
*** tcp_wrappers_7.3/./socket.c	Mon Jan 30 12:51:51 1995
--- ./socket.c	Thu Mar 28 10:35:12 1996
***************
*** 117,122 ****
--- 117,158 ----
  	tcpd_warn("getsockname: %m");
  	return;
      }
+ #ifdef	IP_RECVDSTADDR
+     else if (server.sin_addr.s_addr == 0) {
+ 	struct msghdr msg;
+ 	struct cmsghdr cmsgd[4];
+ 	int on = 1;
+ 	msg.msg_name = (caddr_t)&server;
+ 	msg.msg_namelen = sizeof(server);
+ 	msg.msg_iov = 0;
+ 	msg.msg_iovlen = 0;
+ 	msg.msg_control = (caddr_t)cmsgd;
+ 	msg.msg_controllen = sizeof(cmsgd);
+ 	msg.msg_flags = 0;
+ 	if (setsockopt(fd, IPPROTO_IP, IP_RECVDSTADDR, &on, sizeof (on)) < 0) {
+ 	    tcpd_warn("setsockopt(IP_RECVDSTADDR): %m");
+ 	    return;
+ 	}
+ 	if (recvmsg(fd, &msg, MSG_PEEK) < 0)
+ 	    tcpd_warn("can't get server address: %m");
+ 	else if (msg.msg_controllen >= sizeof (struct cmsghdr)
+ 	    && !(msg.msg_flags & MSG_CTRUNC)) {
+ 	    struct cmsghdr *cmsg;
+ 
+ 	    for (cmsg = CMSG_FIRSTHDR(&msg);
+ 		 cmsg && cmsg->cmsg_len >= sizeof (struct cmsghdr);
+ 		 cmsg = CMSG_NXTHDR(&msg, cmsg)) {
+ 
+ 		if (cmsg->cmsg_level == IPPROTO_IP
+ 		    && cmsg->cmsg_type == IP_RECVDSTADDR
+ 		    && cmsg->cmsg_len >= sizeof(struct in_addr) + sizeof(struct cmsghdr)) {
+ 		    server.sin_addr = *(struct in_addr *) CMSG_DATA(cmsg);
+ 		}
+ 	    }
+ 	}
+     }
+ #endif
+ 
      request->server->sin = &server;
  }
  
diff -c tcp_wrappers_7.3/./tcpd.8 ./tcpd.8
*** tcp_wrappers_7.3/./tcpd.8	Wed Feb 21 09:39:16 1996
--- ./tcpd.8	Thu Mar 28 22:32:59 1996
***************
*** 175,178 ****
--- 175,181 ----
  Eindhoven University of Technology
  Den Dolech 2, P.O. Box 513, 
  5600 MB Eindhoven, The Netherlands
+ .SH "MODIFIED BY BSDI
+ BSDI added the exec and nolog options.  Please note that any problems
+ with these options should be addressed to <problem@BSDI.COM>.
  \" @(#) tcpd.8 1.5 96/02/21 16:39:16
diff -c tcp_wrappers_7.3/./tcpd.c ./tcpd.c
*** tcp_wrappers_7.3/./tcpd.c	Sun Feb 11 10:01:33 1996
--- ./tcpd.c	Thu Mar 28 22:32:59 1996
***************
*** 40,45 ****
--- 40,46 ----
  
  int     allow_severity = SEVERITY;	/* run-time adjustable */
  int     deny_severity = LOG_WARNING;	/* ditto */
+ extern	char *exec_argv[];
  
  main(argc, argv)
  int     argc;
***************
*** 86,91 ****
--- 87,102 ----
      fromhost(&request);
  
      /*
+      * reopen syslog with the name of the server we are running
+      */
+     closelog();
+ #ifdef LOG_MAIL
+     (void) openlog(eval_server(&request), LOG_PID, FACILITY);
+ #else
+     (void) openlog(eval_server(&request), LOG_PID);
+ #endif
+ 
+     /*
       * Optionally look up and double check the remote host name. Sites
       * concerned with security may choose to refuse connections from hosts
       * that pretend to have someone elses host name.
***************
*** 120,126 ****
  
      /* Report request and invoke the real daemon program. */
  
!     syslog(allow_severity, "connect from %s", eval_client(&request));
      closelog();
      (void) execv(path, argv);
      syslog(LOG_ERR, "error: cannot execute %s: %m", path);
--- 131,150 ----
  
      /* Report request and invoke the real daemon program. */
  
!     if (!nolog)
! 	syslog(allow_severity, "connect from %s", eval_client(&request));
! 
!     /* If an alternate path was provided, use that instead */
!     if (exec_argv[0]) {
! 	argv = exec_argv;
! 	if (argv[0][0] == '/') {
! 	    strcpy(path, argv[0]);
! 	    argv[0] = strrchr(argv[0], '/') + 1;
! 	} else {
! 	    sprintf(path, "%s/%s", REAL_DAEMON_DIR, argv[0]);
! 	}
!     }
! 
      closelog();
      (void) execv(path, argv);
      syslog(LOG_ERR, "error: cannot execute %s: %m", path);
diff -c tcp_wrappers_7.3/./tcpd.h ./tcpd.h
*** tcp_wrappers_7.3/./tcpd.h	Sun Feb 11 10:01:34 1996
--- ./tcpd.h	Thu Mar 28 22:33:01 1996
***************
*** 85,90 ****
--- 85,91 ----
  extern int hosts_access_verbose;	/* for verbose matching mode */
  extern int rfc931_timeout;		/* user lookup timeout */
  extern int resident;			/* > 0 if resident process */
+ extern int nolog;			/* should we not log this entry? */
  
   /*
    * Routines for controlled initialization and update of request structure
Index: Makefile
===================================================================
RCS file: /master/contrib/tcpd/Makefile,v
retrieving revision 1.5
diff -c -r1.5 Makefile
*** Makefile	1997/10/29 20:36:55	1.5
--- Makefile	1998/12/04 16:49:15
***************
*** 606,612 ****
  # Paranoid mode implies hostname lookup. In order to disable hostname
  # lookups altogether, see the next section.
  
! PARANOID= -DPARANOID
  
  ########################################
  # Optional: turning off hostname lookups
--- 606,612 ----
  # Paranoid mode implies hostname lookup. In order to disable hostname
  # lookups altogether, see the next section.
  
! # PARANOID= -DPARANOID
  
  ########################################
  # Optional: turning off hostname lookups
***************
*** 619,625 ****
  # In order to perform selective hostname lookups, disable paranoid
  # mode (see previous section) and comment out the following definition.
  
! HOSTNAME= -DALWAYS_HOSTNAME
  
  #############################################
  # Optional: Turning on host ADDRESS checking
--- 619,625 ----
  # In order to perform selective hostname lookups, disable paranoid
  # mode (see previous section) and comment out the following definition.
  
! # HOSTNAME= -DALWAYS_HOSTNAME
  
  #############################################
  # Optional: Turning on host ADDRESS checking
