/*	BSDI termios.xh,v 1.3 2000/04/10 16:51:13 donn Exp	*/

/*
 * Termios.h transforms.
 * Termios structures are (yet another) data structure that
 * looks different to user code than to the kernel.
 * Here we choose to stick with the user version.
 */

%{
#ifdef LIBC5
#define	TERMIOS_C_SPARES	2
#else
#define	TERMIOS_C_SPARES	15
#endif

#define	termios		__bsdi_termios
#include <termios.h>
#undef termios

/* We redefine the BSD termios so that we can map c_cc chars easily.  */
struct termios {
	tcflag_t c_iflag;
	tcflag_t c_oflag;
	tcflag_t c_cflag;
	tcflag_t c_lflag;
	cc_t c_cc_VEOF;
	cc_t c_cc_VEOL;
	cc_t c_cc_VEOL2;
	cc_t c_cc_VERASE;
	cc_t c_cc_VWERASE;
	cc_t c_cc_VKILL;
	cc_t c_cc_VREPRINT;
	cc_t c_cc_spare1;
	cc_t c_cc_VINTR;
	cc_t c_cc_VQUIT;
	cc_t c_cc_VSUSP;
	cc_t c_cc_VDSUSP;
	cc_t c_cc_VSTART;
	cc_t c_cc_VSTOP;
	cc_t c_cc_VLNEXT;
	cc_t c_cc_VDISCARD;
	cc_t c_cc_VMIN;
	cc_t c_cc_VTIME;
	cc_t c_cc_VSTATUS;
	cc_t c_cc_spare2;
	speed_t c_ispeed;
	speed_t c_ospeed;
};

#define	kernel_termios		termios

/* To make mapping easier...  */
#define	B460800			460800
%}

flag unsigned int iflag_t {
	LINUX_IUCLC		0001000;
	IXON			0002000;
	IXANY			0004000;
	IXOFF			0010000;
};

flag unsigned int oflag_t {
	LINUX_OLCUC		0000002;
	ONLCR			0000004;
	LINUX_OCRNL		0000010;
	LINUX_ONOCR		0000020;
	LINUX_ONLRET		0000040;
	LINUX_OFILL		0000100;
	LINUX_OFDEL		0000200;
	LINUX_NLDLY		0000400;
	LINUX_CRDLY		0003000;
	OXTABS			0014000;
	LINUX_BSDLY		0020000;
	LINUX_VTDLY		0040000;
	LINUX_FFDLY		0100000;
	ONOEOT;
};

/* We ignore the baud rate bits (for now).  */
flag unsigned int cflag_t {
	LINUX_CBAUD		0010017;
	LINUX_CSIZE		0000060;
	CSTOPB			0000100;
	CREAD			0000200;
	PARENB			0000400;
	PARODD			0001000;
	HUPCL			0002000;
	CLOCAL			0004000;
	LINUX_CBAUDEX		0010000;
	LINUX_CIBAUD		002003600000;
	CRTSCTS			020000000000;
	CIGNORE;
	CRTS_IFLOW;
	MDMBUF;
	NOCLOCAL;

	in(f, n) {
		return (n | (f & LINUX_CSIZE) << 4);
	}

	out(n, f) {
		return (f | (n & CSIZE) >> 4);
	}
};

flag unsigned int lflag_t {
	ISIG			0000001;
	ICANON			0000002;
	LINUX_XCASE		0000004;
	ECHOE			0000020;
	ECHOK			0000040;
	ECHONL			0000100;
	NOFLSH			0000200;
	TOSTOP			0000400;
	ECHOCTL			0001000;
	ECHOPRT			0002000;
	ECHOKE			0004000;
	FLUSHO			0010000;
	PENDIN			0040000;
	IEXTEN			0100000;
	ALTWERASE;
	NOKERNINFO;
};

cookie unsigned int baud_t {
	B0			0000000;
	B50			0000001;
	B75			0000002;
	B110			0000003;
	B134			0000004;
	B150			0000005;
	B200			0000006;
	B300			0000007;
	B600			0000010;
	B1200			0000011;
	B1800			0000012;
	B2400			0000013;
	B4800			0000014;
	B9600			0000015;
	B19200			0000016;
	B38400			0000017;
	B57600			0010001;
	B115200			0010002;
	B230400			0010003;
	B460800			0010004;
	/* What do we say about baud rates that Linux can't represent?  */
};

cookie int tcflow_t {
	TCOOFF			0;
	TCOON			1;
	TCIOFF			2;
	TCION			3;
};

cookie int tcflush_t {
	TCIFLUSH		0;
	TCOFLUSH		1;
	TCIOFLUSH		2;
};

cookie unsigned char ttydisc_t {
	SLIPDISC		1;
	LINUX_N_MOUSE		2;
	PPPDISC			3;
	LINUX_N_STRIP		4;
	LINUX_N_AX25		5;

	in(f) { return (TTYDISC); }
	out(n) { return (0); }
};
