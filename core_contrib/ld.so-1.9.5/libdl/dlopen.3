.\"	BSDI dlopen.3,v 1.1 1998/02/09 22:08:01 donn Exp
.\"
.Dd February 9, 1998
.Os
.Dt DLOPEN 3
.Sh NAME
.Nm dladdr ,
.Nm dlclose ,
.Nm dlerror ,
.Nm dlopen ,
.Nm dlsym
.Nd "library routines for dynamic linking of object files
.Sh SYNOPSIS
.Ic cc ... -ldl ...
.Pp
.Fd #include <dlfcn.h>
.Pp
.Bd -literal
typedef struct {
	const char	*dli_fname;
	void		*dli_fbase;
	const char	*dli_sname;
	void		*dli_saddr;
} Dl_info;
.Ed
.Ft int
.Fn dladdr "void *address" "Dl_info *dlip"
.Ft int
.Fn dlclose "void *handle"
.Ft "char *"
.Fn dlerror "void"
.Ft "void *"
.Fn dlopen "const char *path" "int mode"
.Ft "void *"
.Fn dlsym "void *handle" "const char *name"
.Sh DESCRIPTION
These functions implement the System V dynamic linking routines.
.Pp
The
.Fn dlopen
function opens a shared object file
and loads it into memory.
The
.Fa mode
argument may be
.Dv RTLD_NOW ,
which asks
.Fn dlopen
to perform all linking and relocation upon loading the file, or
.Dv RTLD_LAZY ,
which asks
.Fn dlopen
to delay as much linking and relocation as it can
until the object is referenced.
If the environment variable
.Ev LD_LIBRARY_PATH
is present,
.Fn dlopen
treats it as a search path for object file names
that do not contain a
.Sq Li /
character.
The
.Ev LD_LIBRARY_PATH
variable is ignored if the process is running setuid.
If
.Fn dlopen
is called multiple times with the same pathname
(absolute pathnames generated by parsing
.Ev LD_LIBRARY_PATH
are treated identically to a full absolute pathname),
it returns the same handle,
and the same relocated copy of the object will be referenced.
If
.Fa path
is
.Dv NULL ,
.Fn dlopen
returns a handle for the currently executing program.
The
.Fn dlopen
function returns
.Dv NULL
if it cannot load the requested object file;
otherwise it returns a
.Fa handle
corresponding to the loaded object file,
suitable for use with
.Fn dlsym
and
.Fn dlclose .
.Pp
The
.Fn dlsym
function looks up the symbol
.Fa name
in the object referenced by
.Fa handle
and returns the associated address in memory.
If
.Fn dlsym
detects an error, it returns
.Dv NULL .
.Pp
The
.Fn dlclose
function removes a reference to the given
.Fa handle .
If there are no more references,
.Fn dlclose
frees all resources associated with
.Fa handle .
The
.Fn dlclose
function returns 0 if it is successful and
nonzero if it detected errors.
.Pp
The
.Fn dlerror
function returns an error string associated
with the last error that was reported by
.Fn dlopen ,
.Fn dlsym
or
.Fn dlclose .
The
.Fn dlerror
function returns
.Dv NULL
if no errors have been recorded since the previous call to
.Fn dlerror .
.Pp
The
.Fn dladdr
function is the inverse of the
.Fn dlsym
function.
If the given
.Fa address
is successfully located inside a module,
.Fn dladdr
returns nonzero, otherwise 0.
On a successful return,
the fields of
.Fa dlip
are filled in as follows:
.Pp
.Bl -tag -width dli_fname\0 -compact
.It Fa dli_fname
the pathname of the module
.It Fa dli_fbase
the base address of the module
.It Fa dli_sname
the name of the highest addressed symbol whose
address precedes the given address
.It Fa dli_faddr
the address of that symbol
.El
.Pp
Shared objects must be linked using the
.Fl shared
option to the linker
.Xr ld 1 .
The linker flag
.Fl rpath
may be used to add a directory to the default
search path for shared objects and shared libraries.
The linker flag
.Fl E
or the C compiler flag
.Fl rdynamic
should be used to cause the application
to export its symbols to the shared objects.
See the examples below for details.
.Sh ENVIRONMENT
.Bl -tag -width LD_LIBRARY_PATH\0\0\0\0\0\0
.It Li LD_LIBRARY_PATH
directory search-path for object files
.El
.Sh EXAMPLES
To combine several relocatable object files
into a single shared object file and
link them against the shared math library:
.Bd -literal -offset indent
ld -shared -o combined.so foo.o bar.o baz.o -lm -lc
.Ed
.Pp
To load a shared object file and
refer to its data and code,
you might code a program like this:
.Bd -literal -offset indent
#include <dlfcn.h>
\0...
void *handle;
int *datap;
int (*codep)();
char *file = "combined.so";
\0...
if ((handle = dlopen(file, RTLD_LAZY)) == NULL)
	errx(1, "%s: %s", file, dlerror());
if ((datap = dlsym(handle, "data")) == NULL)
	errx(1, "data: %s", dlerror());
if (*datap == ...)
\0...
if ((codep = dlsym(handle, "code")) == NULL)
	errx(1, "code: %s", dlerror());
if ((*codep)(...) == ...)
\0...
if (dlclose(handle) != 0)
	errx(1, "%s: %s", file, dlerror());
\0...
.Ed
.Pp
You almost always want to use
.Fl rdynamic
to link an application that uses
.Fn dlopen .
Another commonly used linking feature is the
.Em "run path" ,
which sets the directories that the
.Fn dlopen
function will automatically check at run time.
To set the run path to
.Pa /usr/contrib/lib/app ,
you would link the application this way:
.Bd -literal -offset indent
cc -rdynamic -Wl,-rpath,/usr/contrib/lib/app -o dlprog dlprog.o -ldl
.Ed
.Sh SEE ALSO
.Xr cc 1 ,
.Xr ld 1 ,
.Xr elf 5 ,
.Xr ld.so 8
.Sh ACKNOWLEDGEMENTS
This
.Fn dlopen
implementation is based on the Linux
.Xr ld.so 8
implementation, which was primarily written by
Eric Youngdale with help from Mitch D'Souza, David Engel,
Hongjiu Lu, Andreas Schwab and others.
.Sh BUGS
Unlike previous versions of
.Fn dlopen
under BSD/OS,
this version of
.Fn dlopen
cannot load relocatable object files.
It will only load
.Xr elf 5
shared object files.
.Pp
It is not possible to use the
.Fl static
linking flag on an application that uses
.Fn dlopen .
Programs that use the dynamic linking library
must be dynamically linked.
