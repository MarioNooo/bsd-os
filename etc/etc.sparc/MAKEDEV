#!/bin/sh -
#
#	BSDI MAKEDEV,v 2.9 2000/12/01 06:34:55 torek Exp
#
# Copyright (c) 1990 The Regents of the University of California.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#	This product includes software developed by the University of
#	California, Berkeley and its contributors.
# 4. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
#	@(#)MAKEDEV	5.5 (Berkeley) 5/28/91
#
# Device "make" file.  Valid arguments:
#	std	standard devices
#	local	configuration specific devices
#
# Tapes:
#	st*	? tape
#
# Disks:
#	fd*	Floppies
#	sd*	SCSI disks
#	sr*	SCSI removable
#	sp*	splice driver - concatenation and stripes
#	vnd*	vnode-disk driver
#	rd	ram-disk driver
#
# Terminal ports:
#
# Pseudo terminals:
#	pty*	set of 16 master and slave pseudo terminals
#
# Printers:
#
# Call units:
#
# Special purpose devices:
#	audio		Sparc audio
#	bwtwo		Monochrome frame buffer
#	cgthree		Color frame buffer
#	cgsix		Accelerated color frame buffer
#	openprom	Boot prom
#	bpf*		Berkeley packet filter
#	sg*		SCSI generic, any SCSI device not tape or disk
#	tun*		Network Tunnel Interface
#	hfa*		Fore ATM adaptor firmware download access

# Mknod(1) treats 01 as an octal number, so we strip leading 0's
# from unit numbers.  Do it in one place.
getunit()
{
	echo `expr $1 : '[a-z]*0*\(..*\)'`
}

PATH=/sbin:/bin/:/usr/bin:/usr/sbin:/usr/etc
umask 77
for i
do
case $i in

floppystd)
	# Standard devices
	mknod console		c 0 0
	mknod drum		c 7 0	; chmod 640 drum ; chgrp kmem drum
	mknod kmem		c 3 1	; chmod 640 kmem ; chgrp kmem kmem
	mknod mem		c 3 0	; chmod 640 mem  ; chgrp kmem mem
	mknod null		c 3 2	; chmod 666 null
	mknod zero		c 3 12	; chmod 666 zero
	mknod tty		c 2 0	; chmod 666 tty
	mknod klog		c 16 0	; chmod 600 klog
	mknod stdin		c 24 0	; chmod 666 stdin
	mknod stdout		c 24 1	; chmod 666 stdout
	mknod stderr		c 24 2	; chmod 666 stderr
	mknod eeprom		c 3 11  ; chmod 640 eeprom ; chgrp kmem eeprom

	mknod ttya		c 12 0
	mknod ttyb		c 12 1
	mknod fb		c 22 0 ; chmod 666 fb
	mknod mouse		c 13 0 ; chmod 666 mouse
	mknod kbd		c 29 0 ; chmod 666 kbd

	mknod audio		c 69 0; chmod 666 audio
	mknod openprom		c 70 0; chmod 600 openprom

	# Recursively make standard disks, tapes, etc.
	sh $0 fd0 sd0 sd1 sd2 sd3 sr0 sr1 sr2 sr3 rd0 
	sh $0 st0 st1
	sh $0 pty0 bpf sg0 sg1
	;;

std)
	# Recursively make all the devices on the std floppy
	sh $0 floppystd

	# More ptys
	sh $0 pty1 pty2 pty3

	# And all the other regular devs
	mkdir fd > /dev/null 2>&1
	(cd fd && eval `echo "" | awk ' BEGIN { \
		for (i = 0; i < 64; i++) \
			printf("mknod %d c 24 %d;", i, i)}'`)
	chown -R bin.bin fd
	chmod 555 fd
	chmod 666 fd/*

	;;

bwtwo*)
	unit=`getunit $i`
	mknod bwtwo$unit	c 27 $unit; chmod 666 bwtwo$unit
	;;

cgthree*)
	unit=`getunit $i`
	mknod cgthree$unit	c 55 $unit; chmod 666 cgthree$unit
	;;

cgsix*)
	unit=`getunit $i`
	mknod cgsix$unit	c 67 $unit; chmod 666 cgsix$unit
	;;

bpf*)
	name=bpf
	chr=105
	for unit in 0 1 2 3 4 5 6 7 8 9
	do
		mknod ${name}${unit} c $chr $unit
		chmod 440 ${name}${unit}
		chgrp kmem ${name}${unit}
	done
	;;

fd*|sd*|sr*|sp*|vnd*|rd*|wd*)
	umask 002
	unit=`getunit $i`
	case $i in
	fd*) name=fd; maj=54;;
	sd*) name=sd; maj=17;;
	wd*) name=wd; maj=110;;
	sr*) name=sr; maj=58;;
	vnd*) name=vnd; maj=25
	    rm -f /dev/vnd
	    mknod /dev/vnd c 25 1023 0
	    chmod 0600 /dev/vnd;;
	rd*) name=rd; maj=33;;
	sp*) name=sp; maj=23
	    rm -f /dev/splice
	    mknod /dev/splice c 23 1023 0
	    chmod 0600 /dev/splice;;
	esac
	case $unit in
	[0-9] | [0-9][0-9])
		mknod ${name}${unit}a	b $maj $unit 0
		mknod ${name}${unit}b	b $maj $unit 1
		mknod ${name}${unit}c	b $maj $unit 2
		mknod ${name}${unit}d	b $maj $unit 3
		mknod ${name}${unit}e	b $maj $unit 4
		mknod ${name}${unit}f	b $maj $unit 5
		mknod ${name}${unit}g	b $maj $unit 6
		mknod ${name}${unit}h	b $maj $unit 7
		mknod r${name}${unit}a	c $maj $unit 0
		mknod r${name}${unit}b	c $maj $unit 1
		mknod r${name}${unit}c	c $maj $unit 2
		mknod r${name}${unit}d	c $maj $unit 3
		mknod r${name}${unit}e	c $maj $unit 4
		mknod r${name}${unit}f	c $maj $unit 5
		mknod r${name}${unit}g	c $maj $unit 6
		mknod r${name}${unit}h	c $maj $unit 7
		chgrp operator ${name}${unit}[a-h] r${name}${unit}[a-h]
		if [ $name = fd ]; then
			chmod 666 ${name}${unit}[a-h] r${name}${unit}[a-h]
			rm -f floppy${unit}
			ln ${name}${unit}c floppy${unit}
			rm -f rfloppy${unit}
			ln r${name}${unit}c rfloppy${unit}
			rm -f fd${unit}
			ln ${name}${unit}c fd${unit}
			rm -f rfd${unit}
			ln r${name}${unit}c rfd${unit}
			# XXX no densities yet
		else
			chmod 640 ${name}${unit}[a-h] r${name}${unit}[a-h]
		fi
		;;
	*)
		echo bad unit for disk in: $i
		;;
	esac
	umask 077
	;;

st*)
	umask 0
	unit=`getunit $i`
	chr=18
	# SCSI density codes for QIC tape (incomplete)
	# XXX block devices currently unsupported
	qic11=4; qic24=5; qic120=15; qic150=16; qic525=17
	dds=19; ddsII=36
	fixed=512;      # High bit indicates fixed length records
	mknod rst${unit} c $chr $unit 0
	mknod nrst${unit} c $chr $unit 1
	mknod rst${unit}_f8mm c $chr $unit  $fixed
	mknod nrst${unit}_f8mm c $chr $unit `expr $fixed + 1`
	mknod rst${unit}_fixed c $chr $unit  $fixed
	mknod nrst${unit}_fixed c $chr $unit `expr $fixed + 1`
	mknod rst${unit}_dds c $chr $unit `expr $dds \* 2`
	mknod nrst${unit}_dds c $chr $unit `expr $dds \* 2 + 1`
	mknod rst${unit}_fdds c $chr $unit `expr $dds \* 2 + $fixed`
	mknod nrst${unit}_fdds c $chr $unit `expr $dds \* 2 + $fixed + 1`
	mknod rst${unit}_ddsII c $chr $unit `expr $ddsII \* 2`
	mknod nrst${unit}_ddsII c $chr $unit `expr $ddsII \* 2 + 1`
	mknod rst${unit}_fddsII c $chr $unit `expr $ddsII \* 2 + $fixed`
	mknod nrst${unit}_fddsII c $chr $unit `expr $ddsII \* 2 + $fixed + 1`
	mknod rst${unit}_q11 c $chr $unit `expr $qic11 \* 2`
	mknod nrst${unit}_q11 c $chr $unit `expr $qic11 \* 2 + 1`
	mknod rst${unit}_q24 c $chr $unit `expr $qic24 \* 2`
	mknod nrst${unit}_q24 c $chr $unit `expr $qic24 \* 2 + 1`
	mknod rst${unit}_q120 c $chr $unit `expr $qic120 \* 2`
	mknod nrst${unit}_q120 c $chr $unit `expr $qic120 \* 2 + 1`
	mknod rst${unit}_q150 c $chr $unit `expr $qic150 \* 2`
	mknod nrst${unit}_q150 c $chr $unit `expr $qic150 \* 2 + 1`
	mknod rst${unit}_q525 c $chr $unit `expr $qic525 \* 2`
	mknod nrst${unit}_q525 c $chr $unit `expr $qic525 \* 2 + 1`
	umask 077
	;;

pty*)
	unit=`getunit $i`
	case $unit in
	0) offset=0 name=p;;
	1) offset=16 name=q;;
	2) offset=32 name=r;;
	3) offset=48 name=s;;
	4) offset=64 name=t;;
	5) offset=80 name=u;;
	6) offset=96 name=v;;
	7) offset=112 name=w;;
	8) offset=128 name=x;;
	9) offset=144 name=y;;
	10) offset=160 name=z;;
	11) offset=176 name=P;;
	12) offset=192 name=Q;;
	13) offset=208 name=R;;
	14) offset=224 name=S;;
	15) offset=240 name=T;;
	*) echo bad unit for pty in: $i;;
	esac
	case $unit in
	0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15)
		umask 0
		eval `echo $offset $name | awk ' { b=$1; n=$2 } END {
			for (i = 0; i < 16; i++)
				printf("mknod tty%s%x c 20 %d; \
					mknod pty%s%x c 21 %d; ", \
					n, i, b+i, n, i, b+i); }'`
		umask 077
		;;
	esac
	;;

sg*)
	name=sg
	chr=19
	unit=`getunit $i`
	mknod ${name}${unit} c $chr $unit 0
	chmod 0600 ${name}${unit}
	;;

tun*)
	name=tun
	chr=53
	unit=`getunit $i`
	mknod ${name}${unit} c $chr $unit
	chmod 0600 ${name}${unit}
	;;

hfa*)
	name=hfa
	chr=4
	unit=`getunit $i`
	mknod ${name}${unit} c $chr $unit
	chmod 0600 ${name}${unit}
	;;

local)
	umask 0
	sh MAKEDEV.local
	;;

*)
	echo "MAKEDEV: $i: no such device."
	;;
esac
done
