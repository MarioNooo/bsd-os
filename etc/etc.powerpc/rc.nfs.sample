# Copyright (c) 2001 Wind River Systems, Inc.  All rights reserved.

# Copyright (c) 1995 Berkeley Software Design, Inc. All rights reserved.
# The Berkeley Software Design Inc. software License Agreement specifies
# the terms and conditions for redistribution.
#
#	BSDI rc.nfs.sample,v 1.1 2002/05/09 15:23:06 prb Exp

# System startup script run by init on autoboot or after single-user.
# Output and error are redirected to console by init, and the console
# is the controlling terminal.

# Convenience routine to check for existence of commands in our path
# so we can avoid absolute paths in the script
is_executable () {
	local IFS
	local -

	IFS=:
	for path in ${PATH}; do
		if [ -x ${path}/${1} ]; then
			return 0
		fi
	done
	return 1
}

is_executable stty && stty status '^T'

# Set shell to ignore SIGINT (signal 2), but not children; shell catches
# SIGQUIT (signal 3) and returns to single user after fsck.
trap : 2
trap : 3	# shouldn't be needed

HOME=/; export HOME
PATH=$PATH:/usr/libexec

if [ -f /etc/rc.first ] 
then
	. /etc/rc.first
fi

if [ $1x = autobootx ] && is_executable fsck
then
	echo "Automatic reboot in progress: starting file system checks."
	fsck -p
	case $? in
	0)
		;;
	2)
		exit 1
		;;
	4)
		echo "Rebooting..."
		reboot
		echo "Reboot failed; help!"
		exit 1
		;;
	8)
		echo "Automatic file system check failed; help!"
		exit 1
		;;
	12)
		echo "Boot interrupted."
		exit 1
		;;
	130)
		# interrupt before catcher installed
		exit 1
		;;
	*)
		echo "Unknown error; help!"
		exit 1
		;;
	esac
fi

trap "echo 'Boot interrupted.'; exit 1" 3

nfs=YES

is_executable swapon && swapon -a
is_executable asyncd && asyncd 2

is_executable umount && umount -a >/dev/null 2>&1
if is_executable mount; then 
	mount -u /
	mount -a
fi

for dir in /var/db /usr/bin; do
	if [ ! -d $dir ]; then
		echo "Required filesystems were not mounted; help!"
		exit 1
	fi
done

# clean up left-over files
if is_executable rm
then
	rm -f /etc/nologin
	rm -f /var/spool/uucp/LCK.*
	rm -f /var/spool/uucp/STST/*
	rm -f /var/spool/at/atrun.lock
	(cd /var/run && 
		{ rm -rf -- *; install -c -m 664 -g utmp /dev/null utmp; })
fi

if [ -d /etc/rc.configure ]
then
	cd /etc/rc.configure
	trap "echo 'configuration interrupted.'; exit 1" 2
	is_executable stty && stty erase ^H
	TERM=$(	(echo 'console() {
		term="$2"; for i do
			case $i in
			term=*) term=$(expr "$i" : "term=\(.*\)")
			esac
		done; echo "$term"; exit 0
	    }'; grep '^console[ 	]' /etc/ttys) | sh)
	export TERM

	for i in *
	do
		case $i in
		[0-9]*.*.*[0-9])
			if ! ./$i ; then
				exit 1
			fi
			;;
		*)
			;;
		esac
	done
	trap : 2
	cd /
fi

if [ -r /etc/license ] && is_executable sysctl
then
	sysctl -w kern.license="$(cat /etc/license)" > /dev/null
else
	echo "Warning: no license for this machine"
fi

if [ -d /etc/rc.hardware ]
then
	cd /etc/rc.hardware
	echo -n system specific hardware configuration:
	for i in *
	do
		case $i in
		[0-9]*.*.*[0-9])
			sh $i
			;;
		*)
			;;
		esac
	done
	echo .
	cd /
fi

if [ ! -f /.base-5.0 ]; then	# create a file as a timestamp for install
	is_executable touch && touch /.base-5.0
fi

is_executable gettyd && gettyd -s	# start gettyd single user mode

# set hostname, turn on network
echo 'starting network'
. /etc/netstart

# start status monitor and locking daemon if they exist
echo -n 'starting nfs releated daemons:'
is_executable portmap && echo -n ' portmap' && portmap
is_executable statd && echo -n ' statd' && statd
is_executable lockd && echo -n ' lockd' && lockd
is_executable nfsiod && echo -n ' nfsiod' && nfsiod 4
echo '.'


echo 'starting system logger'
is_executable syslogd && syslogd ${syslogdflags-"-l"}

# /var/crash should be a directory or a symbolic link
# to the crash directory if core dumps are to be saved.
if [ -d /var/crash ] && is_executable savecore; then
	echo checking for core dump...
	savecore /var/crash
fi

# If /etc/gated.conf exists, gated is used; otherwise routed.
if [ -f /etc/gated.conf ]; then
	is_executable gdc && is_executable gated && gdc start
fi

echo -n 'starting network daemons:'

if [ -f /etc/snmp/snmpd.conf ] && is_executable snmpd; then
	echo -n ' snmpd';	snmpd
fi

if [ X"${ilmid}" = XYES ] && is_executable ilmid; then
	echo -n ' ilmid';	ilmid
fi

if [ -f /etc/scspd.conf -a X"${atmarpd}" != XNO ] && 
	is_executable scspd && is_executable atmarpd 
then
	echo -n ' scspd';	scspd
	echo -n ' atmarpd';	atmarpd ${atmarpd}
fi

# If gated is being used or $routedflags == NO, routed isn't run.
#   (our routed is a perl script which runs gated wih an appropriate config)
if [ ! -f /etc/gated.conf -a X"${routedflags}" != XNO ] && 
	is_executable routed && is_executable gated && is_executable perl5
then
	[ "X${routedflags}" = "XYES" ] && routedflags=""
	echo -n ' routed';	routed $routedflags
fi

if [ -f /etc/named.conf ] && is_executable named; then
	echo -n ' named';	named
fi

if [ X${nis_domain} != X ] && is_executable ypbind; then
	echo -n " ypbind";	ypbind -s
fi

if [ -f /etc/dhcpd.conf -a "X${dhcpdflags}" != X"NO" ] && is_executable dhcpd
then
	[ "X${dhcpdflags}" = "XYES" ] && dhcpdflags=""
	echo -n ' dhcpd';	dhcpd $dhcpdflags
fi

# Only start mountd and nfs daemons if /etc/exports exists
if is_executable mountd && is_executable nfsd
then
	echo -n ' mountd';		mountd
	echo -n ' nfsd';		nfsd -u -t -n 6
fi

echo '.'


if is_executable awk && [ X$(/usr/bin/awk '/#/ { next; } $3 == "ufs" {print $3; exit}' /etc/fstab) != X ]
then
	echo -n 'checking quotas:'
	is_executable quotacheck && quotacheck -a
	echo ' done.'
	is_executable quotaon && quotaon -a
fi

# build ps databases
is_executable kvm_mkdb && kvm_mkdb /bsd
is_executable dev_mkdb && dev_mkdb

# build lsof database
is_executable rm && rm -f /var/run/lsof.dc
if is_executable lsof
then
	lsof -Du/var/run/lsof.dc -p99999 > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		echo "problems creating /var/run/lsof.dc"
		is_executable rm && rm -f /var/run/lsof.dc
	else
		is_executable chmod && chmod 0644 /var/run/lsof.dc
	fi
fi

is_executable chmod && chmod 666 /dev/tty[pqrs]*
is_executable chown && chown root /dev/console
is_executable chmod && chmod 600 /dev/console

# check the password temp/lock file
if [ -f /etc/ptmp ] && is_executable logger; then
	logger -s -p auth.err \
		'password file may be incorrect -- /etc/ptmp exists'
fi

# recover nvi editor files
[ -x /usr/share/vi/recover ] && /usr/share/vi/recover

echo clearing /tmp

# prune quickly with one rm, then use find to clean up /tmp/[lq]*
# (not needed with mfs /tmp, but doesn't hurt there...)
(cd /tmp && is_executable rm && rm -rf [a-km-pr-zA-Z]* &&
	is_executable find && find -d . ! -name . \
	! -name lost+found ! -name quotas ! -name quota.user \
	! -name quota.group -exec rm -rf -- {} \;)

if [ -f /var/account/acct ] && is_executable accton; then
	echo 'turning on accounting';	accton /var/account/acct
fi

echo 'checking system configuration'
is_executable chkconfig && chkconfig

echo -n standard daemons:

is_executable cron && echo -n ' cron' && cron

if [ "X${randomdflags}" != X"NO" ] && is_executable randomd; then
	[ "X${randomdflags}" = "XYES" ] && randomdflags=""
	echo -n ' randomd';	randomd $randomdflags
	if [ ! -e /dev/random ] ; then
		is_executable ln && ln -sf /var/run/random.stream /dev/random
	fi
	if [ ! -e /dev/urandom ] ; then
		is_executable ln && ln -sf /var/run/random.md5 /dev/urandom
	fi
fi
echo '.'

if [ -f /etc/ntp.conf ] && is_executable awk; then
	NTPSERVERS=$(awk '$1 == "peer" { peers = peers " " $2 }
		$1 == "server" && $2 !~ /^127.127/ { servers = servers " " $2 }
		$1 == "broadcastclient" && (NF == 2) { print $2 }
		$1 == "manycastclient" && (NF > 1) { print $2 }
		$1 == "multicastclient" { print (NF > 1) ? 
		    gensub("^[:blank:]*multicastclient[:blank:]*", "", "g") :
		    "224.0.1.1" }
		END { servers = servers " " peers; 
		    print gensub("^ *", "", "g", servers) }' /etc/ntp.conf)
	if [ -n "${NTPSERVERS}" ] && is_executable ntpdate; then
		echo -n 'using ntpdate to set the clock'
		ntpdate -bs ${NTPSERVERS}
		echo '.'
	fi
fi

if [ "X${sshdflags}" != "XNO" ] && is_executable ssh-keygen; then
	# Generate keys if they don't exist...
	if [ ! -f /etc/ssh_host_key ] ; then
		echo -n 'generating ssh host key (may take a while) ...'
		ssh-keygen -q -t rsa1 -N '' -f /etc/ssh_host_key 
		echo ' done!'
	fi
	if [ ! -f /etc/ssh_host_dsa_key ]  ; then
		echo -n 'generating ssh DSA host key (may take a while) ...'
		ssh-keygen -q -t dsa -N '' -f /etc/ssh_host_dsa_key 
		echo ' done!'
	fi
	if [ ! -f /etc/ssh_host_rsa_key ]  ; then
		echo -n 'generating ssh RSA host key (may take a while) ...'
		ssh-keygen -q -t rsa -N '' -f /etc/ssh_host_rsa_key 
		echo ' done!'
	fi
fi

echo -n starting additional network daemons:

if [ -f /etc/ntp.conf ] && is_executable ntpd; then
	echo -n ' ntpd';		( limit openfiles 580; ntpd )
else
	# $timedflags is imported from /etc/netstart;
	# if $timedflags == NO, timed isn't run.
	if [ "X${timedflags}" != X"NO" ] && is_executable timed; then
		[ "X${timedflags}" = "XYES" ] && timedflags=""
		echo -n ' timed'; 	timed $timedflags
	fi
fi


# $rwhod is imported from /etc/netstart;
# if $rwhod is set to something other than NO, rwhod is run.
if [ "${rwhod-NO}" != "NO" ] && is_executable rwhod; then
	[ "X${rwhod}" = "XYES" ] && rwhod=""
	echo -n " rwhod";		rwhod $rwhod
fi

# $rstatd is imported from /etc/netstart;
# if $rstatd is not to something other than NO, rstatd is run.
if [ ${rstatd-NO} != "NO" ] && is_executable rstatd; then
	echo -n ' rstatd';		rstatd &
fi

if [ -f /etc/printcap ] && is_executable lpd; then
	echo -n ' printer';		lpd
fi

if [ -f /etc/mail/sendmail.cf ] && is_executable sendmail; then
	(cd /var/spool/mqueue; is_executable rm && rm -f [lnx]f*)
	# Build /etc/mail/aliases.db if there isn't one (req. in newer versions)
	if [ ! -f /etc/mail/aliases.db ] && is_executable newaliases; then
		newaliases >/dev/null 2>&1
	fi
	# start sendmail with an absolute path so kill -HUP works
	echo -n ' sendmail';		/usr/sbin/sendmail -bd -q30m
fi

if [ -f /etc/amd.conf ] && is_executable amd; then
	echo -n ' amd';			amd 
fi

# Kerberos runs ONLY on the Kerberos server machine
if [ -f /etc/kerberosIV/principal.db ] && is_executable kerberos; then
	echo -n ' kerberos'
	kerberos >> /var/log/kerberos.log &
fi

if [ -f /var/www/docs/index.html ] && is_executable apachectl; then
	echo -n ' httpd';	apachectl startq
fi

if [ -f /var/www/squid/conf/squid.conf ] && is_executable squid; then
	[ -x /var/www/squid/bin/start-squid ] && 
		echo -n ' squid' && /var/www/squid/bin/start-squid
fi

# Main fax spooler processes -- modem processes are run from /etc/ttys by
# init or out-only faxq processes are run from rc.local
if [ -f /var/spool/fax/etc/config ]; then
	is_executable faxq  && echo -n ' faxq' && /usr/contrib/bin/faxq
	[ -x /usr/contrib/lib/hylafax/hfaxd ] && 
		echo -n ' hfaxd' &&
		/usr/contrib/lib/hylafax/hfaxd -i hylafax -o oldfax -s snpp
fi

# Samba (SMB/Lanmanager/NT filesystem and print server)
if [ -f /etc/smb.conf ] && is_executable nmbd && is_executable smbd
then
	echo -n ' nmbd';	nmbd -D
	echo -n ' smbd';	smbd -D
fi

# "-u internal" is the same as the default action if
# there is no -u option.
if [ -f /etc/inetd.conf ] && is_executable inetd; then
	echo -n ' inetd';	inetd -u ${inetd_ignore:-internal}
fi

if [ -f /etc/raddb/users -a -f /etc/raddb/clients ] && is_executable radiusd
then
	echo -n ' radiusd';	radiusd
fi

# Start rarpd if it might answer queries
if [ -f /etc/ethers -a -d /tftpboot ] && is_executable rarpd; then
	echo -n ' rarpd';	rarpd -a
fi

if [ "X${apmdflags}" != "XNO" ] && is_executable apmd; then
	echo -n ' apmd';	apmd ${apmdflags}
fi

if [ "X${sshdflags}" != "XNO" ] && is_executable sshd; then
	echo -n ' sshd';	sshd ${sshdflags}
fi

echo '.'

# Transition to symmetric I/O mode and start additional CPUs
if [ -f /etc/mp.config -a ! -f /etc/mp.nostart ] && is_executable cpu; then
	echo 'Starting additional CPUs'; cpu mp
fi

sh /etc/rc.local

is_executable date && date
exit 0
