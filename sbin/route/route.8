.\"#	@(#)COPYRIGHT	1.1 (NRL) 17 January 1995
.\"
.\"COPYRIGHT NOTICE
.\"
.\"All of the documentation and software included in this software
.\"distribution from the US Naval Research Laboratory (NRL) are
.\"copyrighted by their respective developers.
.\"
.\"Portions of the software are derived from the Net/2 and 4.4 Berkeley
.\"Software Distributions (BSD) of the University of California at
.\"Berkeley and those portions are copyright by The Regents of the
.\"University of California. All Rights Reserved.  The UC Berkeley
.\"Copyright and License agreement is binding on those portions of the
.\"software.  In all cases, the NRL developers have retained the original
.\"UC Berkeley copyright and license notices in the respective files in
.\"accordance with the UC Berkeley copyrights and license.
.\"
.\"Portions of this software and documentation were developed at NRL by
.\"various people.  Those developers have each copyrighted the portions
.\"that they developed at NRL and have assigned All Rights for those
.\"portions to NRL.  Outside the USA, NRL has copyright on some of the
.\"software developed at NRL. The affected files all contain specific
.\"copyright notices and those notices must be retained in any derived
.\"work.
.\"
.\"NRL LICENSE
.\"
.\"NRL grants permission for redistribution and use in source and binary
.\"forms, with or without modification, of the software and documentation
.\"created at NRL provided that the following conditions are met:
.\"
.\"1. All terms of the UC Berkeley copyright and license must be followed.
.\"2. Redistributions of source code must retain the above copyright
.\"   notice, this list of conditions and the following disclaimer.
.\"3. Redistributions in binary form must reproduce the above copyright
.\"   notice, this list of conditions and the following disclaimer in the
.\"   documentation and/or other materials provided with the distribution.
.\"4. All advertising materials mentioning features or use of this software
.\"   must display the following acknowledgements:
.\"
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\"
.\"	This product includes software developed at the Information
.\"	Technology Division, US Naval Research Laboratory.
.\"
.\"5. Neither the name of the NRL nor the names of its contributors
.\"   may be used to endorse or promote products derived from this software
.\"   without specific prior written permission.
.\"
.\"THE SOFTWARE PROVIDED BY NRL IS PROVIDED BY NRL AND CONTRIBUTORS ``AS
.\"IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
.\"TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
.\"PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL NRL OR
.\"CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
.\"EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
.\"PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
.\"PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
.\"LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
.\"NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\"SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\"The views and conclusions contained in the software and documentation
.\"are those of the authors and should not be interpreted as representing
.\"official policies, either expressed or implied, of the US Naval
.\"Research Laboratory (NRL).
.\"----------------------------------------------------------------------
.\" Copyright (c) 1983, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)route.8	8.4 (Berkeley) 6/1/94
.\"
.Dd June 1, 1994
.Dt ROUTE 8
.Os BSD 4.4
.Sh NAME
.Nm route
.Nd manually manipulate the routing tables.
.Sh SYNOPSIS
.Nm route
.Op Fl nqv
.Ar command
.Oo
.Op Ar modifiers
.Ar args
.Oc
.Sh DESCRIPTION
.Nm Route
is a utility used to manually manipulate the network
routing tables.  It normally is not needed, as a
system routing table management daemon such as
.Xr routed 8 ,
should tend to this task.
.Pp
The
.Nm route :
utility supports a limited number of general options,
but a rich command language, enabling the user to specify
any arbitrary request that could be delivered via the
programmatic interface discussed in 
.Xr route 4 .
.Pp
.Bl -tag -width Ds
.It Fl n
Bypasses attempts to print host and network names symbolically
when reporting actions.  (The process of translating between symbolic
names and numerical equivalents can be quite time consuming, and
may require correct operation of the network; thus it may be expedient
to forgo this, especially when attempting to repair networking operations),
.It Fl v
(verbose) Print additional details.
.It Fl q
Suppress all output.
.El
.Pp
The
.Nm route :
utility provides six commands:
.Pp
.Bl -tag -width Fl -compact
.It Cm add
Add a route.
.It Cm flush
Remove all routes.
.It Cm delete
Delete a specific route.
.It Cm change
Change aspects of a route (such as its gateway).
.It Cm get
Lookup and display the route for a destination.
.It Cm monitor
Continuously report any changes to the routing information base,
routing lookup misses, or suspected network partitionings.
.El
.Pp
The monitor command has the syntax
.Pp
.Bd -filled -offset indent -compact
.Nm route Op Fl n
.Cm monitor
.Ed
.Pp
The flush command has the syntax
.Pp
.Bd -filled -offset indent -compact
.Nm route Op Fl n
.Cm flush
.Op Ar family
.Ed
.Pp
If the 
.Cm flush
command is specified, 
.Nm route
will ``flush'' the routing tables of all gateway entries.
When the address family may is specified by any of the
.Fl osi ,
.Fl xns ,
.Fl inet ,
or
.Fl inet6
modifiers, only routes having destinations with addresses in the
delineated family will be deleted.
.Pp
The other commands have the following syntax:
.Pp
.Bd -filled -offset indent -compact
.Nm route Op Fl n
.Ar command
.Op Fl net No \&| Fl host
.Ar destination 
.Op Fl gateway 
gateway
.Ed
.Pp
where
.Ar destination
is the destination host or network,
.Ar gateway
is the next-hop intermediary via which packets should be routed.
Routes to a particular host may be distinguished from those to
a network by interpreting the Internet address specified as the
.Ar destination argument.
For IP and IPv6 the word
.Dq default
can be used as a destination.  
.Pp
To enable IPv6 in IPv4 automatic host-to-host
tunneling (as mentioned in the IPv6 Transition Mechanisms document), one must
.Xr ifconfig
an interface with a v4-compatible address, and subnet mask corresponding to
the IPv4 netmask, and then one must specify the 
.Ar -htunnel
flag (see below), a
.Ar destination
of
.Dq transdefault,
and a
.Ar gateway
of some random IPv4 address.
.Pp
Example:
.Bd -filled -offset indent -compact
.Nm route Op Fl n
.Ar add
.Fl htunnel
transdefault
.Ar IPv4-gateway
.Ed

The above will enable a self-tunneling IPv6-in-IPv4 route.
.Pp
Host and network tunnel routes can also be setup.  Tunnel routes allow
a packet sent to a particular destination host or network to be
encapsulated in another IP (v4 or v6) packet with the encapsulating
packet addressed to the host specified by the
.Ar gateway
field.  Supported modes of encapsulation include: IPv6-in-IPv4,
IPv6-in-IPv6, IPv4-in-IPv4, and IPv4-in-IPv6.  The mode selected is
based on the address family of the 
.Ar destination 
and
.Ar gateway
field.  IPSEC security may be applied to a tunnel route using the
.Fl auth 
and/or 
.Fl encrypt 
options.  If applied, the authentication and or encryption is done on
the outer encapsulating packet and appropriate security associations
between the current node and the 
.Ar gateway
node will be required.  See key(8).

The following syntax is used to add or delete tunnel routes:

.Bd -filled -offset indent -compact
.Nm route Op Fl n
.Ar command
.Op Fl inet No \&| Fl inet6
.Ar destination
.Fl netmask
.Ar netmask
.Fl tunnel
.Op Fl auth
.Op Fl encrypt
.Op Fl inet No \&| Fl inet6
.Ar gateway
.Ed
.Pp
Examples:

.Bd -filled -offset indent -compact
.Nm route
add
.Fl inet
.Ar IPv4-net
.Fl tunnel
.Fl auth
.Fl encrypt
.Fl inet
.Ar IPv4-gateway
.Ed
.Pp
The above will create an IPv4-in-IPv4 authenticated and encrypted
tunnel between the current node and 
.Ar IPv4-gateway
for packets destined for
.Ar IPv4-net.
.Pp
.Bd -filled -offset indent -compact
.Nm route
add
.Fl inet6
.Ar IPv6-net
.Fl netmask
.Ar IPv6-netmask
.Fl tunnel
.Fl auth
.Fl inet
.Ar IPv4-gateway
.Ed
.Pp
The above route will encapsulate IPv6 packets destined for 
.Ar IPv6-net
in an authenticated IPv4 packet that will be sent
from the current node to 
.Ar IPv4-gateway.

The optional modifiers
.Fl net
and
.Fl host
force the destination to be interpreted as a network or a host, respectively.
Otherwise, if the 
.Ar destination
has a ``local address part'' of
INADDR_ANY ,
or if the
.Ar destination
is the symbolic name of a network, then the route is
assumed to be to a network; otherwise, it is presumed to be a
route to a host.
.Pp
For example,
.Li 128.32
is interpreted as
.Fl host Li 128.0.0.32 ;
.Li 128.32.130
is interpreted as
.Fl host Li 128.32.0.130 ;
.Fl net Li 128.32
is interpreted as
.Li 128.32.0.0;
and 
.Fl net Li 128.32.130
is interpreted as
.Li 128.32.130.0 .
.Pp
If the destination is directly reachable
via an interface requiring
no intermediary system to act as a gateway, the 
.Fl interface
modifier should be specified;
the gateway given is the address of this host on the common network,
indicating the interface to be used for transmission.
.Pp
The optional modifiers
.Fl xns ,
.Fl inet6 ,
.Fl osi ,
and
.Fl link 
specify that all subsequent addresses are in the
.Tn XNS ,
.Tn INET6 ,
or
.Tn OSI
address families,
or are specified as link-level addresses,
and the names must be numeric specifications rather than
symbolic names.
.Pp
The optional
.Fl netmask
qualifier is intended
to achieve the effect of an
.Tn OSI
.Tn ESIS
redirect with the netmask option,
or to manually add subnet routes with
netmasks different from that of the implied network interface
(as would otherwise be communicated using BGPv4, IS-IS, OSPF, RIP-II or other 
routing protocols that propagate netmasks).
One specifies an additional ensuing address parameter
(to be interpreted as a network mask).
AF_INET6 needs this also, since all IPv6 addresses are classless.
The implicit network mask generated in the AF_INET case
can be overridden by making sure this option follows the destination parameter.
CIDR style address/netmask specification is allowed
by following an IPv4 or IPv6 address with a forward slash ('/') and the
network prefix.
.Pp
Routes have associated flags which influence operation of the protocols
when sending to destinations matched by the routes.
These flags may be set (or sometimes cleared)
by indicating the following corresponding modifiers:
.Bd -literal
-cloning    RTF_CLONING    - generates a new route on use
-cloned     RTF_CLONED     - a cloned host route
-xresolve   RTF_XRESOLVE   - emit mesg on use (for external lookup)
-interface ~RTF_GATEWAY    - destination is directly reachable
-static     RTF_STATIC     - manually added route
-nostatic  ~RTF_STATIC     - pretend route added by kernel or daemon
-reject     RTF_REJECT     - emit an ICMP unreachable when matched
-blackhole  RTF_BLACKHOLE  - silently discard pkts (during updates)
-proto1     RTF_PROTO1     - set protocol specific routing flag #1
-proto2     RTF_PROTO2     - set protocol specific routing flag #2
-llinfo     RTF_LLINFO     - validly translates proto addr to link addr
-rtunnel   RTF_TUNNEL|RTF_GATEWAY  - tunnel packets to a border router
-tunnel    (alias for rtunnel)
-htunnel   RTF_TUNNEL (~RTF_GATEWAY) - tunnel packets to a host
                                       (WARNING:  Results can be
                                                  unpredictable.)
-auth      RTF_AUTH       - authenticated tunnel 
-encrypt   RTF_CRYPT      - encrypted tunnel 
.Ed
.Pp
The optional modifiers
.Fl rtt ,
.Fl rttvar ,
.Fl sendpipe ,
.Fl recvpipe ,
.Fl mtu ,
.Fl hopcount ,
.Fl expire ,
and
.Fl ssthresh
provide initial values to quantities maintained in the routing entry
by transport level protocols, such as TCP or TP4.
These may be individually locked by preceding each such modifier to
be locked by
the
.Fl lock
meta-modifier, or one can 
specify that all ensuing metrics may be locked by the
.Fl lockrest
meta-modifier.
Locking the
.Fl mtu
value on a route will disable
Path MTU Discovery for all TCP connections
using that route.
Setting the
.Fl expire
value will cause the route to be deleted
in the specified number of seconds.
(Note: 
.Nm route
accepts and displays the
.Fl expire
value as a relative offset to the current
time, even though it is stored in the kernel
as an absolute time.)
.Pp
In a
.Cm change
or
.Cm add
command where the destination and gateway are not sufficient to specify
the route (as in the
.Tn ISO
case where several interfaces may have the
same address), the
.Fl ifp
or
.Fl ifa
modifiers may be used to determine the interface or interface address.
.Pp
All symbolic names specified for a
.Ar destination
or 
.Ar gateway
are looked up first as a host name using
.Xr gethostbyname 3 .
If this lookup fails,
.Xr getnetbyname 3
is then used to interpret the name as that of a network.
.Pp
.Nm Route
uses a routing socket and the new message types
RTM_ADD,
RTM_DELETE,
RTM_GET,
and
RTM_CHANGE.
As such, only the super-user may modify
the routing tables.
.ne 1i
.Sh DIAGNOSTICS
.Bl -tag -width Ds
.It Sy "add [host \&| network ] %s: gateway %s flags %x"
The specified route is being added to the tables.  The
values printed are from the routing table entry supplied
in the 
.Xr ioctl 2
call.
If the gateway address used was not the primary address of the gateway
(the first one returned by
.Xr gethostbyname 3 ) ,
the gateway address is printed numerically as well as symbolically.
.It Sy "delete [ host &| network ] %s: gateway %s flags %x" 
As above, but when deleting an entry.
.It Sy "%s %s done"
When the 
.Cm flush
command is specified, each routing table entry deleted
is indicated with a message of this form.
.It Sy "Network is unreachable"
An attempt to add a route failed because the gateway listed was not
on a directly-connected network.
The next-hop gateway must be given.
.It Sy "not in table"
A delete operation was attempted for an entry which
wasn't present in the tables.
.It Sy "routing table overflow"
An add operation was attempted, but the system was
low on resources and was unable to allocate memory
to create the new entry.
.El
.Sh SEE ALSO
.Xr netintro 4 ,
.Xr route 4 ,
.Xr esis 4 ,
.Xr routed 8 ,
.Xr XNSrouted 8
.Sh HISTORY
The
.Nm
command appeared in
.Bx 4.2 .
.Sh BUGS
The first paragraph may have slightly exaggerated
.Xr routed Ns 's
abilities.
.Pp
Some of the options available with IPv4 routes are either not available or
not tested with IPv6.  Using
.Ar -htunnel
with destinations other than v4-compatible IPv6 addresses is not
well tested.
.Pp
The creation of IPv6-in-IPv6 default tunnel routes is not supported at
the moment.  Support for other default tunnel routes (e.g. IPv4-in-IPv4) 
is not well tested.
.Pp
For tunnel routes, setting the 
.Ar destination
and 
.Ar gateway
field to the same host can lead to a system crash.

IPv4-in-IPv4 and IPv6-in-IPv6 tunnel routes are not well tested.  

An IPv4-in-IPv4 or IPv6-in-IPv6 tunnel route to a network through a
gateway that belongs in that network will crash the system when the
tunnel route is used.  Example:

	route add -inet 132.250.0.0 -tunnel -auth -inet 132.250.90.5

The above route currently causes endless encapsulating of packets to
network 132.250.0.0 which will result in a system crash.  A possible
workaround is to add a static route for the gateway to some other
router, e.g.,

	route add -inet 132.250.0.0 -tunnel -auth -inet 132.250.90.5
	route add 132.250.90.5 132.250.90.1

